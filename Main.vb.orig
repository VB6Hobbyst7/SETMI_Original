Public Class Main

#Region "Load"

    Private Sub Main_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Me.AutoScaleMode = Windows.Forms.AutoScaleMode.Dpi

        For Item = 0 To [Enum].GetNames(GetType(EnergyBalance)).Count - 1
            EnergyBalanceBox.Items.Add([Enum].GetName(GetType(EnergyBalance), Item).Replace("_", " "))
        Next
        For Item = 0 To [Enum].GetNames(GetType(ETExtrapolation)).Count - 1
            ETExtrapolationBox.Items.Add([Enum].GetName(GetType(ETExtrapolation), Item).Replace("_", " "))
        Next
        For Item = 0 To [Enum].GetNames(GetType(WaterBalance)).Count - 1
            WaterBalanceBox.Items.Add([Enum].GetName(GetType(WaterBalance), Item).Replace("_", " "))
        Next
        WaterBalanceBox.SelectedIndex = 0
        For Item = 0 To [Enum].GetNames(GetType(DataAssimilation)).Count - 1
            DataAssimilationBox.Items.Add([Enum].GetName(GetType(DataAssimilation), Item).Replace("_", " "))
        Next
        For Item = 0 To [Enum].GetNames(GetType(ImageSource)).Count - 1
            ImageSourceBox.Items.Add([Enum].GetName(GetType(ImageSource), Item).Replace("_", " "))
        Next

        Dim OutputImageListE = Split("Leaf Area Index (LAI),Soil Adjusted Vegetation Index (SAVI),Net Solar Radiation (Rn),Aerodynamic Resistance to Heat Transfer (rah),Soil Heat Flux (G),Latent Flux (LE),Normalized Difference Vegetation Index (NDVI),Optimized Soil Adjusted Vegetation Index (OSAVI),Albedo (α),Aerodynamic Temperature (To),Sensible Heat Flux (H),Evapotranspiration (ET)", ",")
        Array.Sort(OutputImageListE)
        For Each Item In OutputImageListE
            OutputImagesBoxEnergy.Items.Add(Item)
        Next
        Dim OutputImageListW = Split("Basal Cover Coefficient (Kb),Evaporation Coefficient (Ke),Water Stress Coefficient (Ks),Cover Evapotranspiration (ETc),Water Stressed Cover Evapotranspiration (ETcAdjusted)", ",")
        Array.Sort(OutputImageListW)
        For Each Item In OutputImageListW
            OutputImagesBoxWater.Items.Add(Item)
        Next

        For Each TimeZone In TimeZoneInfo.GetSystemTimeZones
            TimeZoneBox.Items.Add(TimeZone.StandardName)
        Next
        TimeZoneBox.Text = TimeZone.CurrentTimeZone.StandardName

        DataGridViewColumns.AddNormal(CalculationCoordinatesGrid, "X", DataGridViewColumns.DataTypes.typeDouble)
        DataGridViewColumns.AddNormal(CalculationCoordinatesGrid, "Y", DataGridViewColumns.DataTypes.typeDouble)
        DataGridViewColumns.AddNormal(CalculationCoordinatesGrid, "Projection", DataGridViewColumns.DataTypes.typeString)
        For I = 0 To CalculationCoordinatesGrid.Columns.Count - 1
            CalculationCoordinatesGrid.Columns(I).ReadOnly = True
            CalculationCoordinatesGrid.Columns(I).SortMode = Windows.Forms.DataGridViewColumnSortMode.NotSortable
        Next
        CalculationCoordinatesGrid.Columns(2).Width = 182

        'Brazil()
        'Cibola_air()
        'Cibola()
        'Sample_2()
        AGU_2013_point()
        'AGU_2013_gridded()
        'Sample_Iowa_Landsat_hybrid()
        'Sample_Iowa_MODIS_TSEB()
        'Sample_Iowa_MODIS_hybrid()
    End Sub

    Private Sub ImageSourceBox_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles ImageSourceBox.SelectedIndexChanged
        Dim ImageSource As ImageSource = DirectCast([Enum].Parse(GetType(ImageSource), ImageSourceBox.SelectedItem.ToString.Replace(" ", "_")), ImageSource)

        Dim Enabled = (ImageSource = Functions.ImageSource.MODIS)
        ZenithList.Enabled = Enabled
        ZenithAdd.Enabled = Enabled
        ZenithRemove.Enabled = Enabled
        ZenithList.BackColor = If(Enabled, Drawing.Color.White, Drawing.Color.LightGray)
    End Sub

    Private Sub WaterBalanceBox_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles WaterBalanceBox.SelectedIndexChanged
        Dim WaterBalance As WaterBalance = DirectCast([Enum].Parse(GetType(WaterBalance), WaterBalanceBox.SelectedItem.ToString.Replace(" ", "_")), WaterBalance)

        Select Case WaterBalance
            Case Functions.WaterBalance.Crop_Coefficient_Grid
                Label23.Text = "        Output Images"
                OutputImagesBoxWater.Visible = True
                OutputImagesCheckAllWater.Visible = True
                OutputImagesUncheckAllWater.Visible = True
                CalculationCoordinatesGrid.Visible = False
                CalculationCoordinatesAdd.Visible = False
                CalculationCoordinatesRemove.Visible = False
            Case Functions.WaterBalance.Crop_Coefficient_Point
                Label23.Text = "        Calculation Coordinates"
                OutputImagesBoxWater.Visible = False
                OutputImagesCheckAllWater.Visible = False
                OutputImagesUncheckAllWater.Visible = False
                CalculationCoordinatesGrid.Visible = True
                CalculationCoordinatesAdd.Visible = True
                CalculationCoordinatesRemove.Visible = True
        End Select
    End Sub

    Public Class DataGridViewColumns

        Shared Sub AddNormal(ByVal DataGridView As Windows.Forms.DataGridView, ByVal ColumnName As String, Optional ByVal DataType As DataTypes = DataTypes.typeString, Optional ByVal Read_Only As Boolean = False)
            DataGridView.Columns.Add(ColumnName, ColumnName)
            Dim NewColumnDataType As String = ""
            Select Case DataType
                Case DataTypes.typeBoolean
                    NewColumnDataType = "Boolean"
                Case DataTypes.typeByte
                    NewColumnDataType = "Byte"
                Case DataTypes.typeChar
                    NewColumnDataType = "Char"
                Case DataTypes.typeDate
                    NewColumnDataType = "DateTime"
                Case DataTypes.typeDecimal
                    NewColumnDataType = "Decimal"
                Case DataTypes.typeDouble
                    NewColumnDataType = "Double"
                Case DataTypes.typeInteger
                    NewColumnDataType = "Int32"
                Case DataTypes.typeLong
                    NewColumnDataType = "Int64"
                Case DataTypes.typeObject
                    NewColumnDataType = "Object"
                Case DataTypes.typeSByte
                    NewColumnDataType = "SByte"
                Case DataTypes.typeShort
                    NewColumnDataType = "Int16"
                Case DataTypes.typeSingle
                    NewColumnDataType = "Single"
                Case DataTypes.typeString
                    NewColumnDataType = "String"
                Case DataTypes.typeUInteger
                    NewColumnDataType = "UInt32"
                Case DataTypes.typeULong
                    NewColumnDataType = "UInt64"
                Case DataTypes.typeUShort
                    NewColumnDataType = "UInt16"
            End Select
            DataGridView.Columns(ColumnName).ValueType = Type.GetType("System." & NewColumnDataType)
            DataGridView.Columns(ColumnName).ReadOnly = Read_Only
        End Sub

        Shared Sub AddCombo(ByVal DataGridView As Windows.Forms.DataGridView, ByVal ColumnName As String, ByVal Items As Array, Optional ByVal BindingList As ArrayList = Nothing)
            Dim NewColumn As New Windows.Forms.DataGridViewComboBoxColumn

            NewColumn.Name = ColumnName

            For Each Item In Items
                NewColumn.Items.Add(Item)
            Next

            NewColumn.FlatStyle = Windows.Forms.FlatStyle.Flat

            Dim Graphics As Drawing.Graphics = Drawing.Graphics.FromHwnd(New System.IntPtr)
            Dim Width As Integer = 9
            For Each Item In Items
                Width = Math.Max(Width, Graphics.MeasureString(Item, DataGridView.DefaultCellStyle.Font).ToSize.Width)
            Next
            NewColumn.DropDownWidth = Math.Max(Width + 15, NewColumn.DropDownWidth)

            If Not BindingList Is Nothing Then NewColumn.DataSource = BindingList

            DataGridView.Columns.Add(NewColumn)
        End Sub

        Shared Sub AddCheckbox(ByVal DataGridView As Windows.Forms.DataGridView, ByVal ColumnName As String)
            Dim NewColumn As New Windows.Forms.DataGridViewCheckBoxColumn
            NewColumn.Name = ColumnName
            DataGridView.Columns.Add(NewColumn)
        End Sub

        Enum DataTypes
            typeBoolean = 1
            typeByte = 2
            typeChar = 3
            typeDate = 4
            typeDecimal = 5
            typeDouble = 6
            typeInteger = 7
            typeLong = 8
            typeObject = 9
            typeSByte = 10
            typeShort = 11
            typeSingle = 12
            typeString = 13
            typeUInteger = 14
            typeULong = 15
            typeUShort = 16
        End Enum

    End Class

    Sub Cibola_air()
        Dim Path As String = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\airborne_version_1\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 0
        MultispectralList.Items.Add(Path & "reflectance_05-17-2008.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add(Path & "temp_05-17-2008.img")
        CoverClassificationList.Items.Add(Path & "landuse_05-18-2008.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        MIR1Index.SelectedIndex = 2
        WeatherTableText.Text = Path & "airborne_Cibola_data_EB.xlsx\Sheet1$"
        CoverPropertiesText.Text = Path & "airborne_Cibola_data_EB.xlsx\Sheet4$"
        OutputDirectoryTextEnergy.Text = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\results_airborne_1"
        OutputDirectoryTextWater.Text = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\results_airborne_1"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {2, 3, 4}
        For Row = 0 To 3
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Mountain Standard Time")
        Dim Outs = {3, 4, 6, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Outs.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
        WeatherTableGrid.Rows(6).Cells(1).Value = WeatherVariables(7)
    End Sub

    Sub Cibola()
        Dim Path As String = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\version_1_data\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        MultispectralList.Items.Add(Path & "reflectance_v1_05-17-2008 10-04.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add(Path & "temp_05-17-2008 10-04.img")
        CoverClassificationList.Items.Add(Path & "Landuse_05-18-2008 10-00.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        MIR1Index.SelectedIndex = 2
        WeatherTableText.Text = Path & "Cibola_data_EB.xlsx\Sheet1$"
        CoverPropertiesText.Text = Path & "Cibola_data_EB.xlsx\Sheet4$"
        OutputDirectoryTextEnergy.Text = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\results_version_1_2"
        'OutputDirectoryTextWater.Text = "E:\Cibola\Data_for_paper_3\Data_Chapman_paper\results_version_1"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {2, 3, 4}
        For Row = 0 To 3
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Mountain Standard Time")
        Dim Outs = {3, 4, 6, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Outs.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        'FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        'WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
        'WeatherTableGrid.Rows(6).Cells(1).Value = WeatherVariables(7)
    End Sub

    Sub Brazil()
        Dim Path As String = "E:\Brazil Study\SETMI_analysis\images_included\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        MultispectralList.Items.Add(Path & "reflectance_173_06-22-2010.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add(Path & "temp_173_06-22-2010.img")
        CoverClassificationList.Items.Add("E:\Brazil Study\landuse\Landuse_new_06-22-2010.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CType(CreateRasterDataset(CoverClassificationList.Items(0)), ESRI.ArcGIS.Geodatabase.IRasterDataset2).CreateFullRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 3
        RedIndex.SelectedIndex = 2
        MIR1Index.SelectedIndex = 4
        WeatherTableText.Text = "E:\Brazil Study\weather_data\Acarau_data_EB.xls\Sheet1$"
        OutputDirectoryTextEnergy.Text = "E:\Brazil Study\SETMI_analysis\results"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        Dim Rows = {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 18, 19, 21, 22, 23, 28}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Central Brazilian Standard Time")
        Dim Outs = {3, 4, 5, 6, 7, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Outs.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
        WeatherTableGrid.Rows(6).Cells(1).Value = WeatherVariables(7)
    End Sub

    Sub Sample()
        Dim Path As String = "D:\SETMI\SETMI_old\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 0
        WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 0
        MultispectralList.Items.Add(Path & "3band_07-12-2008.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add(Path & "temp_k_07-12-2008.img")
        CoverClassificationList.Items.Add(Path & "bearax08_class_filt_2_resamp_07-12-2008.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = Path & "Bearax_data_EB.xlsx\Sheet1$"
        CoverPropertiesText.Text = Path & "Bearax_data_EB.xlsx\Sheet2$"
        OutputDirectoryTextEnergy.Text = "D:\SETMI\Output"
        OutputDirectoryTextWater.Text = "D:\SETMI\Output"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12}
        For Row = 0 To 12
            If Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Not Irrigated"
            End If
        Next
        CoverSelectionGrid.Rows(6).Cells(2).Value = "Sprinkler"
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Central Standard Time")
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Item = 5 Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
    End Sub

    Sub Sample_2()
        Dim Path As String = "D:\SETMI\SETMI_old\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 0
        WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        MultispectralList.Items.Add("D:\AGU_2012_PVID\Landsat_images\PVID_subset\3banb_pvid_131_2008_tucson_sub_05-10-2008.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add("D:\AGU_2012_PVID\Landsat_images\PVID_subset\pvid_thermal_c_131_2008_corrected_tucson_sub_05-10-2008.img")
        CoverClassificationList.Items.Add("D:\AGU_2012_PVID\landuse\Modified_2\n1_05-01-2008.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "D:\AGU_2012_PVID\weather_data\PVID_data_EB.xlsx\Sheet1$"
        CoverPropertiesText.Text = "D:\AGU_2012_PVID\weather_data\Bearax_data_EB.xlsx\Sheet2$"
        OutputDirectoryTextEnergy.Text = "D:\AGU_2012_PVID\TSEB_results"
        OutputDirectoryTextWater.Text = "D:\SETMI\Output"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {0, 1, 2, 3, 6, 7, 8, 15, 16, 18}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        CoverSelectionGrid.Rows(2).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(3).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(6).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(7).Cells(1).Value = "Agriculture"
        CoverSelectionGrid.Rows(8).Cells(1).Value = "Bare Soil"
        CoverSelectionGrid.Rows(15).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(18).Cells(1).Value = "Agriculture"
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Pacific Standard Time")
        Dim Output = {3, 5, 7, 10}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
        WeatherTemperatureList.Items.Add("D:\AGU_2012_PVID\gridded_weather\Temperature1_05_10_2008.img")
        WeatherHumidityList.Items.Add("D:\AGU_2012_PVID\gridded_weather\Humidity1_05_10_2008.img")
        WeatherWindSpeedList.Items.Add("D:\AGU_2012_PVID\gridded_weather\Wind Speed1_05_10_2008.img")
        WeatherRadiationList.Items.Add("D:\AGU_2012_PVID\gridded_weather\Solar Radiation1_05_10_2008.img")
    End Sub

    Sub AGU_2013_gridded()
        'Dim Path As String = "D:\SETMI\SETMI_old\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        'WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_019_2008_tucson_sub_01-19-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_042_2008_tucson_sub_02-11-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_058_2008_tucson_sub_02-27-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_067_2008_tucson_sub_03-07-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_083_2008_tucson_sub_03-23-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_099_2008_tucson_sub_04-08-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_115_2008_tucson_sub_04-24-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_131_2008_tucson_sub_05-10-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_138_2008_tucson_sub_05-17-2008 10-04.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_147_2008_tucson_sub_05-26-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_163_2008_tucson_sub_06-11-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_170_2008_tucson_sub_06-18-2008 10-03.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_195_2008_tucson_sub_07-13-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_211_2008_tucson_sub_07-29-2008 09-57.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_218_2008_tucson_sub_08-05-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_234_2008_tucson_sub_08-21-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_259_2008_tucson_sub_09-15-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_275_2008_tucson_sub_10-01-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_291_2008_tucson_sub_10-17-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_314_2008_tucson_sub_11-09-2008 09-58.img")
        MultispectralList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\3banb_pvid_323_2008_tucson_sub_11-18-2008 09-58.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_019_2008_corrected_tucson_sub_01-19-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_042_2008_corrected_tucson_sub_02-11-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_058_2008_corrected_tucson_sub_02-27-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_067_2008_corrected_tucson_sub_03-07-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_083_2008_corrected_tucson_sub_03-23-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_099_2008_corrected_tucson_sub_04-08-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_115_2008_corrected_tucson_sub_04-24-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_131_2008_corrected_tucson_sub_05-10-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_138_2008_corrected_tucson_sub_05-17-2008 10-04.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_147_2008_corrected_tucson_sub_05-26-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_163_2008_corrected_tucson_sub_06-11-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_170_2008_corrected_tucson_sub_06-18-2008 10-03.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_195_2008_corrected_tucson_sub_07-13-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_211_2008_corrected_tucson_sub_07-29-2008 09-57.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_218_2008_corrected_tucson_sub_08-05-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_234_2008_corrected_tucson_sub_08-21-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_259_2008_corrected_tucson_sub_09-15-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_275_2008_corrected_tucson_sub_10-01-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_291_2008_corrected_tucson_sub_10-17-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_314_2008_corrected_tucson_sub_11-09-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("E:\AGU_2013_PVID\Landsat_images\PVID_subset\pvid_thermal_c_323_2008_corrected_tucson_sub_11-18-2008 09-58.img")
        CoverClassificationList.Items.Add("E:\AGU_2013_PVID\landuse\Modified_2\Landuse_05-01-2008 10-00.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "E:\AGU_2013_PVID\weather_data\PVID_data_EB.xlsx\gridded$"
        'CoverPropertiesText.Text = "E:\AGU_2013_PVID\weather_data\Bearax_data_EB.xlsx\Sheet2$"
        OutputDirectoryTextEnergy.Text = "E:\AGU_2013_PVID\testing_new_results_gridded_2014"
        OutputDirectoryTextWater.Text = "E:\SETMI\Output"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        CoverSelectionGrid.Rows(2).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(3).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(4).Cells(1).Value = "Watermelon"
        CoverSelectionGrid.Rows(5).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(6).Cells(1).Value = "Agriculture"
        CoverSelectionGrid.Rows(7).Cells(1).Value = "Bare Soil"
        CoverSelectionGrid.Rows(9).Cells(1).Value = "Agriculture"
        CoverSelectionGrid.Rows(12).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(13).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(14).Cells(1).Value = "Citrus"
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Pacific Standard Time")
        Dim Output = {3, 4, 6, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        'FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        'WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_019_18_01-19-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_042_18_02-11-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_058_18_02-27-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_067_18_03-07-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_083_18_03-23-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_099_18_04-08-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_115_18_04-24-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_131_18_05-10-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_138_18_05-17-2008 10-04.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_147_18_05-26-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_163_18_06-11-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_170_18_06-18-2008 10-03.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_195_18_07-13-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_211_18_07-29-2008 09-57.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_218_18_08-05-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_234_18_08-21-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_259_18_09-15-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_275_18_10-01-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_291_18_10-17-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_314_18_11-09-2008 09-58.img")
        WeatherTemperatureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\tmp_323_18_11-18-2008 09-58.img")

        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_019_18_01-19-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_042_18_02-11-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_058_18_02-27-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_067_18_03-07-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_083_18_03-23-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_099_18_04-08-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_115_18_04-24-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_131_18_05-10-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_138_18_05-17-2008 10-04.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_147_18_05-26-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_163_18_06-11-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_170_18_06-18-2008 10-03.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_195_18_07-13-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_211_18_07-29-2008 09-57.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_218_18_08-05-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_234_18_08-21-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_259_18_09-15-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_275_18_10-01-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_291_18_10-17-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_314_18_11-09-2008 09-58.img")
        WeatherHumidityList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\spfh_323_18_11-18-2008 09-58.img")

        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_019_18_01-19-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_042_18_02-11-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_058_18_02-27-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_067_18_03-07-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_083_18_03-23-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_099_18_04-08-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_115_18_04-24-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_131_18_05-10-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_138_18_05-17-2008 10-04.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_147_18_05-26-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_163_18_06-11-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_170_18_06-18-2008 10-03.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_195_18_07-13-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_211_18_07-29-2008 09-57.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_218_18_08-05-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_234_18_08-21-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_259_18_09-15-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_275_18_10-01-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_291_18_10-17-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_314_18_11-09-2008 09-58.img")
        WeatherWindSpeedList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\wind_323_18_11-18-2008 09-58.img")

        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_019_18_01-19-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_042_18_02-11-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_058_18_02-27-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_067_18_03-07-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_083_18_03-23-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_099_18_04-08-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_115_18_04-24-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_131_18_05-10-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_138_18_05-17-2008 10-04.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_147_18_05-26-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_163_18_06-11-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_170_18_06-18-2008 10-03.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_195_18_07-13-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_211_18_07-29-2008 09-57.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_218_18_08-05-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_234_18_08-21-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_259_18_09-15-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_275_18_10-01-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_291_18_10-17-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_314_18_11-09-2008 09-58.img")
        WeatherRadiationList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\dswrf_323_18_11-18-2008 09-58.img")

        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_019_18_01-19-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_042_18_02-11-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_058_18_02-27-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_067_18_03-07-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_083_18_03-23-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_099_18_04-08-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_115_18_04-24-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_131_18_05-10-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_138_18_05-17-2008 10-04.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_147_18_05-26-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_163_18_06-11-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_170_18_06-18-2008 10-03.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_195_18_07-13-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_211_18_07-29-2008 09-57.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_218_18_08-05-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_234_18_08-21-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_259_18_09-15-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_275_18_10-01-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_291_18_10-17-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_314_18_11-09-2008 09-58.img")
        WeatherPressureList.Items.Add("E:\AGU_2013_PVID\gridded_data\projected\pres_323_18_11-18-2008 09-58.img")

        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_01-19-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_02-11-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_02-27-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_03-07-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_03-23-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_04-08-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_04-24-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_05-10-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_05-17-2008 10-04.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_05-26-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_06-11-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_06-18-2008 10-03.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_07-13-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_07-29-2008 09-57.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_08-05-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_08-21-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_09-15-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_10-01-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_10-17-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_11-09-2008 09-58.img")
        'WeatherETInstantaneousList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\hourly\ETrc_hr_18_11-18-2008 09-58.img")

        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\019_ref_proj_01-19-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\042_ref_proj_02-11-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\058_ref_proj_02-27-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\067_ref_proj_03-07-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\083_ref_proj_03-23-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\099_ref_proj_04-08-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\115_ref_proj_04-24-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\131_ref_proj_05-10-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\138_ref_proj_05-17-2008 10-04.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\147_ref_proj_05-26-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\163_ref_proj_06-11-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\170_ref_proj_06-18-2008 10-03.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\195_ref_proj_07-13-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\211_ref_proj_07-29-2008 09-57.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\218_ref_proj_08-05-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\234_ref_proj_08-21-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\259_ref_proj_09-15-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\275_ref_proj_10-01-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\291_ref_proj_10-17-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\314_ref_proj_11-09-2008 09-58.img")
        'WeatherETDailyReferenceList.Items.Add("E:\AGU_2013_PVID\reference_ET\raster_projected\daily_new\323_ref_proj_11-18-2008 09-58.img")

    End Sub

    Sub AGU_2013_point()
        'Dim Path As String = "D:\SETMI\SETMI_old\"
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        'WaterBalanceBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_019_2008_tucson_sub_01-19-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_042_2008_tucson_sub_02-11-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_058_2008_tucson_sub_02-27-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_067_2008_tucson_sub_03-07-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_083_2008_tucson_sub_03-23-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_099_2008_tucson_sub_04-08-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_115_2008_tucson_sub_04-24-2008 09-58.img")
        MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_131_2008_tucson_sub_05-10-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_138_2008_tucson_sub_05-17-2008 10-04.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_147_2008_tucson_sub_05-26-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_163_2008_tucson_sub_06-11-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_170_2008_tucson_sub_06-18-2008 10-03.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_195_2008_tucson_sub_07-13-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_211_2008_tucson_sub_07-29-2008 09-57.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_218_2008_tucson_sub_08-05-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_234_2008_tucson_sub_08-21-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_259_2008_tucson_sub_09-15-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_275_2008_tucson_sub_10-01-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_291_2008_tucson_sub_10-17-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_314_2008_tucson_sub_11-09-2008 09-58.img")
        'MultispectralList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\3banb_pvid_323_2008_tucson_sub_11-18-2008 09-58.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_019_2008_corrected_tucson_sub_01-19-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_042_2008_corrected_tucson_sub_02-11-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_058_2008_corrected_tucson_sub_02-27-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_067_2008_corrected_tucson_sub_03-07-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_083_2008_corrected_tucson_sub_03-23-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_099_2008_corrected_tucson_sub_04-08-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_115_2008_corrected_tucson_sub_04-24-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_131_2008_corrected_tucson_sub_05-10-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_138_2008_corrected_tucson_sub_05-17-2008 10-04.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_147_2008_corrected_tucson_sub_05-26-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_163_2008_corrected_tucson_sub_06-11-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_170_2008_corrected_tucson_sub_06-18-2008 10-03.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_195_2008_corrected_tucson_sub_07-13-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_211_2008_corrected_tucson_sub_07-29-2008 09-57.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_218_2008_corrected_tucson_sub_08-05-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_234_2008_corrected_tucson_sub_08-21-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_259_2008_corrected_tucson_sub_09-15-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_275_2008_corrected_tucson_sub_10-01-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_291_2008_corrected_tucson_sub_10-17-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_314_2008_corrected_tucson_sub_11-09-2008 09-58.img")
        SurfaceTemperatureList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\Landsat_images\PVID_subset\pvid_thermal_c_323_2008_corrected_tucson_sub_11-18-2008 09-58.img")
        CoverClassificationList.Items.Add("\\Dprssl-ashish\agu_2013_pvid\landuse\Modified_2\Landuse_05-01-2008 10-00.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "\\Dprssl-ashish\agu_2013_pvid\weather_data\PVID_data_EB.xlsx\Point$"
        'CoverPropertiesText.Text = "\\Dprssl-ashish\agu_2013_pvid\weather_data\Bearax_data_EB.xlsx\Sheet2$"
        OutputDirectoryTextEnergy.Text = "\\Dprssl-ashish\agu_2013_pvid\testing_new_results_point_2014_refine"
        'OutputDirectoryTextWater.Text = "E:\SETMI\Output"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        'OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        Dim Rows = {0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Basin"
            End If
        Next
        CoverSelectionGrid.Rows(2).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(3).Cells(1).Value = "Wheat"
        CoverSelectionGrid.Rows(4).Cells(1).Value = "Agriculture"
        CoverSelectionGrid.Rows(5).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(6).Cells(1).Value = "Watermelon"
        CoverSelectionGrid.Rows(7).Cells(1).Value = "Bare Soil"
        CoverSelectionGrid.Rows(9).Cells(1).Value = "Agriculture"
        CoverSelectionGrid.Rows(12).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(13).Cells(1).Value = "Grass"
        CoverSelectionGrid.Rows(14).Cells(1).Value = "Citrus"
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Pacific Standard Time")
        Dim Output = {3, 4, 6, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
        'FieldCapacityText.Text = "D:\SETMI\USA Field Capacity.img"
        'WiltingPointText.Text = "D:\SETMI\USA Wilting Point.img"


    End Sub

    Sub Sample_Iowa_MODIS_TSEB()
        EnergyBalanceBox.SelectedIndex = 1
        ETExtrapolationBox.SelectedIndex = 1
        'WaterBalanceBox.SelectedIndex = 0
        'DataAssimilationBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        'MultispectralList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\landsat_3band_reflectance_07-17-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_06-23-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-01-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-08-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-16-2002.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        'SurfaceTemperatureList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\temp_07-17-2002.img")
        SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_06-23-2002.img")
        SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-01-2002.img")
        SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-08-2002.img")
        SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-16-2002.img")
        CoverClassificationList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\landuse_07-01-2002.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        'GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "E:\ASC_2014_data\MODIS_data\Iowa_weather_data.xls\Sheet4$"
        'CoverPropertiesText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\cropProps.xlsx\Cover$"
        OutputDirectoryTextEnergy.Text = "E:\ASC_2014_data\MODIS_data\results_TSEB"
        'OutputDirectoryTextWater.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\results"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        'OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        'WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_06-23-2002.img")
        'WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-01-2002.img")
        'WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-08-2002.img")
        'WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-16-2002.img")
        Dim Rows = {2, 4}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Not Irrigated"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Central Standard Time")
        Dim Output = {3, 4, 6, 9, 11}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next

        'Dim Output_2 = {15}
        'For Item = 0 To OutputImagesBoxWater.Items.Count - 1
        '    If Not Output_2.Contains(Item) Then OutputImagesBoxWater.SetItemChecked(Item, False)
        'Next
        'FieldCapacityText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\fc_map_07-01-2002.img"
        'WiltingPointText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\pwp_map_07-01-2002.img"
    End Sub

    Sub Sample_Iowa_MODIS_hybrid()
        'EnergyBalanceBox.SelectedIndex = 1
        'ETExtrapolationBox.SelectedIndex = 0
        WaterBalanceBox.SelectedIndex = 0
        DataAssimilationBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        'MultispectralList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\landsat_3band_reflectance_07-17-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_06-23-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-01-2002.img")
        MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-08-2002.img")
        'MultispectralList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\reflectance_07-16-2002.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        'SurfaceTemperatureList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\temp_07-17-2002.img")
        'SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_06-23-2002.img")
        'SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-01-2002.img")
        'SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-08-2002.img")
        'SurfaceTemperatureList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\temp_fine_with_delta_nan2_07-16-2002.img")
        CoverClassificationList.Items.Add("E:\ASC_2014_data\MODIS_data\analysis_data\landuse_07-01-2002.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        'GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "E:\ASC_2014_data\MODIS_data\cropProps.xlsx\meteo$"
        CoverPropertiesText.Text = "E:\ASC_2014_data\MODIS_data\cropProps.xlsx\Cover$"
        'OutputDirectoryTextEnergy.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\results"
        OutputDirectoryTextWater.Text = "E:\ASC_2014_data\MODIS_data\results_Hybrid"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        WeatherETDailyActualList.Items.Add("E:\ASC_2014_data\MODIS_data\results_TSEB\SETMI Two_Source ET 06-23-2002.img")
        WeatherETDailyActualList.Items.Add("E:\ASC_2014_data\MODIS_data\results_TSEB\SETMI Two_Source ET 07-01-2002.img")
        WeatherETDailyActualList.Items.Add("E:\ASC_2014_data\MODIS_data\results_TSEB\SETMI Two_Source ET 07-08-2002.img")
        'WeatherETDailyActualList.Items.Add("E:\ASC_2014_data\MODIS_data\results_TSEB\TSMET_07-16-2002.img")
        Dim Rows = {2, 4}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Not Irrigated"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Central Standard Time")
        Dim Output = {15}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next

        Dim Output_2 = {15}
        For Item = 0 To OutputImagesBoxWater.Items.Count - 1
            If Not Output_2.Contains(Item) Then OutputImagesBoxWater.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "E:\ASC_2014_data\MODIS_data\analysis_data\fc_map_07-01-2002.img"
        WiltingPointText.Text = "E:\ASC_2014_data\MODIS_data\analysis_data\pwp_map_07-01-2002.img"
    End Sub

    Sub Sample_Iowa_Landsat_hybrid()
        'EnergyBalanceBox.SelectedIndex = 1
        'ETExtrapolationBox.SelectedIndex = 0
        WaterBalanceBox.SelectedIndex = 0
        DataAssimilationBox.SelectedIndex = 0
        ImageSourceBox.SelectedIndex = 1
        'MultispectralList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\landsat_3band_reflectance_07-17-2002.img")
        MultispectralList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\landsat_3band_reflectance_06-23-2002.img")
        MultispectralList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\landsat_3band_reflectance_07-01-2002.img")
        MultispectralList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\landsat_3band_reflectance_07-08-2002.img")
        MultispectralList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\landsat_3band_reflectance_07-16-2002.img")
        Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
        Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
        For Item = 1 To RasterBandCollection.Count
            RedIndex.Items.Add(Item)
            GreenIndex.Items.Add(Item)
            BlueIndex.Items.Add(Item)
            NIRIndex.Items.Add(Item)
            MIR1Index.Items.Add(Item)
            MIR2Index.Items.Add(Item)
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        'SurfaceTemperatureList.Items.Add("D:\SETMI\SETMI_old\Iowa 2002\3band_thermal_landuse_SM\temp_07-17-2002.img")
        SurfaceTemperatureList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\temp_06-23-2002.img")
        SurfaceTemperatureList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\temp_07-01-2002.img")
        SurfaceTemperatureList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\temp_07-08-2002.img")
        SurfaceTemperatureList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\temp_07-16-2002.img")
        CoverClassificationList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\landuse_07-01-2002.img")
        Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
            CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
            If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
        NIRIndex.SelectedIndex = 0
        RedIndex.SelectedIndex = 1
        GreenIndex.SelectedIndex = 2
        WeatherTableText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\cropProps.xlsx\meteo$"
        CoverPropertiesText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\cropProps.xlsx\Cover$"
        'OutputDirectoryTextEnergy.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\results"
        OutputDirectoryTextWater.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\results"
        OutputImagesCheckAllEnergy_Click(New Object, New System.EventArgs)
        OutputImagesCheckAllWater_Click(New Object, New System.EventArgs)
        WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_06-23-2002.img")
        WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-01-2002.img")
        WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-08-2002.img")
        WeatherETDailyActualList.Items.Add("W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\ET_maps\TSMET_07-16-2002.img")
        Dim Rows = {2, 4}
        For Row = 0 To CoverSelectionGrid.Rows.Count - 1
            If Not Rows.Contains(Row) Then
                CoverSelectionGrid.Rows(Row).Cells(3).Value = False
            Else
                CoverSelectionGrid.Rows(Row).Cells(2).Value = "Not Irrigated"
            End If
        Next
        TimeZoneBox.SelectedIndex = TimeZoneBox.Items.IndexOf("Central Standard Time")
        Dim Output = {15}
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If Not Output.Contains(Item) Then OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next

        Dim Output_2 = {15}
        For Item = 0 To OutputImagesBoxWater.Items.Count - 1
            If Not Output_2.Contains(Item) Then OutputImagesBoxWater.SetItemChecked(Item, False)
        Next
        FieldCapacityText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\fc_map_07-01-2002.img"
        WiltingPointText.Text = "W:\SETMI_Visual_Studio\Iowa_data_for_Hybrid_ET_paper_one\3band_thermal_landuse_SM\pwp_map_07-01-2002.img"
    End Sub

#End Region

#Region "ArcGIS"

    Public Function CreateTable(ByVal Path As String) As ESRI.ArcGIS.Geodatabase.ITable
        Dim GPUtilities As ESRI.ArcGIS.Geoprocessing.IGPUtilities = New ESRI.ArcGIS.Geoprocessing.GPUtilities
        Return GPUtilities.OpenTableFromString(Path)
    End Function

    Public Function CreateRasterDataset(ByVal Path As String) As ESRI.ArcGIS.Geodatabase.IRasterDataset
        Dim GPUtilities As ESRI.ArcGIS.Geoprocessing.IGPUtilities = New ESRI.ArcGIS.Geoprocessing.GPUtilities
        Return GPUtilities.OpenRasterDatasetFromString(Path)
    End Function

    Public Sub AddRasterDatasetRasterToMap(ByVal RasterDataset As ESRI.ArcGIS.Geodatabase.IRasterDataset, ByVal Map As ESRI.ArcGIS.Carto.IMap)
        Dim RasterLayer As ESRI.ArcGIS.Carto.IRasterLayer = New ESRI.ArcGIS.Carto.RasterLayerClass
        RasterLayer.CreateFromDataset(RasterDataset)
        Map.AddLayer(RasterLayer)
    End Sub

    Public Function CreateIntersectRaster(ByVal InputRasterPath() As String, ByVal InputRasters() As ESRI.ArcGIS.Geodatabase.IRasterDataset, ByVal IntersectRasterPath As String) As ESRI.ArcGIS.Geodatabase.IRasterDataset
        Dim MapAlgebraOperation As ESRI.ArcGIS.SpatialAnalyst.IMapAlgebraOp = New ESRI.ArcGIS.SpatialAnalyst.RasterMapAlgebraOpClass
        Dim Environment As ESRI.ArcGIS.GeoAnalyst.IRasterAnalysisEnvironment = MapAlgebraOperation
        Dim WorkspaceFactory As ESRI.ArcGIS.Geodatabase.IWorkspaceFactory = New ESRI.ArcGIS.DataSourcesRaster.RasterWorkspaceFactory
        Dim OutWorkspace As ESRI.ArcGIS.Geodatabase.IWorkspace = WorkspaceFactory.OpenFromFile(IO.Path.GetDirectoryName(IntersectRasterPath), 0)
        Environment.OutWorkspace = OutWorkspace
        Environment.OutSpatialReference = CType(CreateRasterDataset(InputRasterPath(InputRasterPath.Count - 1)), ESRI.ArcGIS.Geodatabase.IGeoDataset).SpatialReference
        Environment.SetExtent(ESRI.ArcGIS.GeoAnalyst.esriRasterEnvSettingEnum.esriRasterEnvMinOf)
        Environment.SetCellSize(ESRI.ArcGIS.GeoAnalyst.esriRasterEnvSettingEnum.esriRasterEnvMinOf)

        Dim Operation As New System.Text.StringBuilder("SetNull(")
        For P = 0 To InputRasterPath.Count - 1
            InputRasters(P) = CreateRasterDataset(InputRasterPath(P))
            MapAlgebraOperation.BindRaster(InputRasters(P), "Raster" & P) 'delete the line below from + sign
            'Operation.Append(" Con( IsNull( [" & "Raster" & P & "] ) , 1 , 0 ) +  Con( [" & "Raster" & P & "] < 0 , 1 , 0 ) ")
            'Operation.Append(" Con( IsNull( """ & IO.Path.GetFileName(InputRasterPath(P)) & """ ) , 1 , 0 )  ")
            Operation.Append(" Con( IsNull( [" & "Raster" & P & "] ) , 1 , 0 )  ")
            If Not P = InputRasters.Count - 1 Then Operation.Append("+ ")
        Next
        Operation.Append("> 0 , 1 )")

        'If ExistsArcGISFile(IntersectRasterPath) Then DeleteArcGISFile(IntersectRasterPath)

        Dim OutRaster As ESRI.ArcGIS.Geodatabase.IRaster = MapAlgebraOperation.Execute(Operation.ToString)
        Dim Save As ESRI.ArcGIS.Geodatabase.ISaveAs2 = OutRaster
        Save.SaveAs(IO.Path.GetFileName(IntersectRasterPath), OutWorkspace, "IMAGINE Image")
        Dim IntersectRaster = CreateRasterDataset(IntersectRasterPath)
        Return IntersectRaster
    End Function

    Public Function GetRasterCursorIterations(ByVal IntersectRaster As ESRI.ArcGIS.Geodatabase.IRasterDataset) As Long
        Dim IntersectRaster2 As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CType(IntersectRaster.CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        Dim IntersectRasterCursor As ESRI.ArcGIS.Geodatabase.IRasterCursor = IntersectRaster2.CreateCursorEx(Nothing)
        Dim I As Long = 0
        Do
            I += 1
        Loop While IntersectRasterCursor.Next = True
        Return I
    End Function

    Public Sub ExtractRaster(ByVal InputRasterPath As String, ByRef InputRaster As ESRI.ArcGIS.Geodatabase.IRasterDataset, ByVal IntersectRasterPath As String, ByVal IntersectRaster As ESRI.ArcGIS.Geodatabase.IRasterDataset)
        Dim ExtractionOperation As ESRI.ArcGIS.SpatialAnalyst.IExtractionOp = New ESRI.ArcGIS.SpatialAnalyst.RasterExtractionOp
        Dim WorkspaceFactory As ESRI.ArcGIS.Geodatabase.IWorkspaceFactory = New ESRI.ArcGIS.DataSourcesRaster.RasterWorkspaceFactory
        Dim OutWorkspace As ESRI.ArcGIS.Geodatabase.IWorkspace = WorkspaceFactory.OpenFromFile(IO.Path.GetDirectoryName(IntersectRasterPath), 0)
        Dim Environment As ESRI.ArcGIS.GeoAnalyst.IRasterAnalysisEnvironment = ExtractionOperation
        Environment.OutWorkspace = OutWorkspace
        Environment.OutSpatialReference = CType(IntersectRaster, ESRI.ArcGIS.Geodatabase.IGeoDataset).SpatialReference
        Dim ExtentProvider As Object = CType(CType(IntersectRaster, ESRI.ArcGIS.Geodatabase.IGeoDataset).Extent, ESRI.ArcGIS.Geometry.IEnvelope)
        Environment.SetExtent(ESRI.ArcGIS.GeoAnalyst.esriRasterEnvSettingEnum.esriRasterEnvValue, ExtentProvider, IntersectRaster)
        Environment.SetCellSize(ESRI.ArcGIS.GeoAnalyst.esriRasterEnvSettingEnum.esriRasterEnvMinOf)
        Dim Geo = CType(InputRaster, ESRI.ArcGIS.Geodatabase.IGeoDataset)
        Dim OutRaster As ESRI.ArcGIS.Geodatabase.IRaster = ExtractionOperation.Raster(CType(InputRaster, ESRI.ArcGIS.Geodatabase.IGeoDataset), CType(IntersectRaster, ESRI.ArcGIS.Geodatabase.IGeoDataset))
        Dim Save As ESRI.ArcGIS.Geodatabase.ISaveAs2 = OutRaster
        Dim FileName As String = IO.Path.ChangeExtension(IO.Path.GetTempFileName, ".img")
        Save.SaveAs(FileName, OutWorkspace, "IMAGINE Image")
        InputRaster = CreateRasterDataset(FileName)
    End Sub

    Public Function TransformRaster(ByVal Path As String, ByVal RasterDataset As ESRI.ArcGIS.Geodatabase.IRasterDataset, ByVal gcsType As Integer) As ESRI.ArcGIS.DataSourcesRaster.IRaster2
        Dim ExtractionOperation As ESRI.ArcGIS.SpatialAnalyst.IExtractionOp = New ESRI.ArcGIS.SpatialAnalyst.RasterExtractionOp
        Dim Environment As ESRI.ArcGIS.GeoAnalyst.IRasterAnalysisEnvironment = ExtractionOperation
        Dim WorkspaceFactory As ESRI.ArcGIS.Geodatabase.IWorkspaceFactory = New ESRI.ArcGIS.DataSourcesRaster.RasterWorkspaceFactory
        Dim OutWorkspace As ESRI.ArcGIS.Geodatabase.IWorkspace = WorkspaceFactory.OpenFromFile(IO.Path.GetDirectoryName(Path), 0)
        Environment.OutWorkspace = OutWorkspace
        Dim SpatialReferenceFactory As ESRI.ArcGIS.Geometry.ISpatialReferenceFactory = Activator.CreateInstance(Type.GetTypeFromProgID("esriGeometry.SpatialReferenceEnvironment"))
        Dim GeographicCoordinateSystem As ESRI.ArcGIS.Geometry.IGeographicCoordinateSystem = SpatialReferenceFactory.CreateGeographicCoordinateSystem(gcsType)
        Environment.OutSpatialReference = GeographicCoordinateSystem
        Dim TransformedRaster = ExtractionOperation.Raster(CType(RasterDataset, ESRI.ArcGIS.Geodatabase.IGeoDataset), CType(RasterDataset, ESRI.ArcGIS.Geodatabase.IGeoDataset))
        Dim Save As ESRI.ArcGIS.Geodatabase.ISaveAs2 = TransformedRaster
        Dim TransformFileName As String = IO.Path.ChangeExtension(IO.Path.GetTempFileName, ".img")
        Save.SaveAs(TransformFileName, OutWorkspace, "IMAGINE Image")
        Dim TransformRaster2 As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(TransformFileName).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        Return TransformRaster2
    End Function

    Public Function ExistsArcGISFile(ByVal Path As String)
        Try
            If IO.File.Exists(Path) Then
                Dim GPUtilities As ESRI.ArcGIS.Geoprocessing.IGPUtilities = New ESRI.ArcGIS.Geoprocessing.GPUtilities
                Dim DataElement = Nothing
                Try
                    DataElement = GPUtilities.MakeDataElement(Path, Nothing, Nothing)
                Catch ex As Exception
                    Throw
                End Try
                Dim GPValue = GPUtilities.MakeGPValueFromObject(DataElement)
                Return GPUtilities.Exists(GPValue)
            Else
                Return False
            End If
        Catch
            Return False
        End Try
        'Return False
    End Function

    Public Function ExistsArcGISFile(ByVal Paths As List(Of String))
        Dim Exists As Boolean = True
        For I = 0 To Paths.Count - 1
            If Not ExistsArcGISFile(Paths(I)) Then
                MsgBox(Paths(I) & " does not exist.")
                Exists = False
                Exit For
            End If
        Next
        Return Exists
    End Function

    Public Sub DeleteArcGISFile(ByVal Path As String)
        Dim GPUtilities As ESRI.ArcGIS.Geoprocessing.IGPUtilities = New ESRI.ArcGIS.Geoprocessing.GPUtilities
        Dim DataElement = GPUtilities.MakeDataElement(Path, Nothing, Nothing)
        Dim GPValue = GPUtilities.MakeGPValueFromObject(DataElement)
        GPUtilities.Delete(GPValue)
    End Sub

    Public Sub AddRastersIntoListBox(ListBox As Windows.Forms.ListBox, Text As String)
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load " & Text & " images"
        OpenFileDialog.AllowMultiSelect = True
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterRasterDatasets
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing
        Dim GxObject As ESRI.ArcGIS.Catalog.IGxDataset

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        GxObject = List.Next
        Do
            Dim Path As String = GxObject.Dataset.Workspace.PathName & GxObject.Dataset.Name
            If Not ListBox.Items.Contains(Path) Then ListBox.Items.Add(Path)
            GxObject = List.Next
        Loop Until GxObject Is Nothing

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
    End Sub

    Public Sub RemoveRastersFromListBox(ListBox As Windows.Forms.ListBox)
        Dim Indices = ListBox.SelectedIndices
        For Index = Indices.Count - 1 To 0 Step -1
            ListBox.Items.RemoveAt(Indices(Index))
        Next
    End Sub

    Public Function FileExists(ListBox As Windows.Forms.ListBox, List As List(Of String), Index As Integer)
        Dim Exists = True

        For I = 0 To ListBox.Items.Count - 1
            If Not ExistsArcGISFile(List(I)) Then
                TabControl1.SelectedIndex = Index
                ListBox.ClearSelected()
                ListBox.SelectedIndex = ListBox.Items.IndexOf(List(I))
                MsgBox(List(I) & " does not exist.")
                Exists = False
                Exit For
            End If
        Next

        Return Exists
    End Function

    Public Function FileExists(TextBox As Windows.Forms.TextBox, Index As Integer)
        Dim Exists = True

        If Not TextBox.Text = "" Then
            If Not ExistsArcGISFile(TextBox.Text) Then
                TabControl1.SelectedIndex = Index
                TextBox.SelectAll()
                MsgBox(TextBox.Text & " does not exist.")
                Exists = False
            End If
        End If

        Return Exists
    End Function

#End Region

#Region "Surface"

    Private Sub MultispectralAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MultispectralAdd.Click
        Dim GetBands As Boolean = IIf(MultispectralList.Items.Count = 0, True, False)

        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load multispectral image(s)"
        OpenFileDialog.AllowMultiSelect = True
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterRasterDatasets
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing
        Dim GxObject As ESRI.ArcGIS.Catalog.IGxDataset

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        GxObject = List.Next
        Do
            Dim Path As String = GxObject.Dataset.Workspace.PathName & GxObject.Dataset.Name
            If Not MultispectralList.Items.Contains(Path) Then MultispectralList.Items.Add(Path)
            GxObject = List.Next
        Loop Until GxObject Is Nothing

        If GetBands = True Then
            Dim RasterDataset = CreateRasterDataset(MultispectralList.Items(0))
            Dim RasterBandCollection As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = RasterDataset
            For Item = 1 To RasterBandCollection.Count
                RedIndex.Items.Add(Item)
                GreenIndex.Items.Add(Item)
                BlueIndex.Items.Add(Item)
                NIRIndex.Items.Add(Item)
                MIR1Index.Items.Add(Item)
                MIR2Index.Items.Add(Item)
            Next
            System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterDataset)
            System.Runtime.InteropServices.Marshal.ReleaseComObject(RasterBandCollection)
        End If

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
    End Sub

    Private Sub MultispectralRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MultispectralRemove.Click
        Dim Indices = MultispectralList.SelectedIndices
        For Index = Indices.Count - 1 To 0 Step -1
            MultispectralList.Items.RemoveAt(Indices(Index))
        Next
        If MultispectralList.Items.Count = 0 Then
            RedIndex.Items.Clear()
            GreenIndex.Items.Clear()
            MIR1Index.Items.Clear()
            RedIndex.Text = ""
            GreenIndex.Text = ""
            MIR1Index.Text = ""
        End If
    End Sub

    Private Sub SurfaceTemperatureAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SurfaceTemperatureAdd.Click
        AddRastersIntoListBox(SurfaceTemperatureList, "surface temperature")
    End Sub

    Private Sub SurfaceTemperatureRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SurfaceTemperatureRemove.Click
        RemoveRastersFromListBox(SurfaceTemperatureList)
    End Sub

    Private Sub VegetationHeightAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles VegetationHeightAdd.Click
        AddRastersIntoListBox(VegetationHeightList, "vegetatation height")
    End Sub

    Private Sub VegetationHeightRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles VegetationHeightRemove.Click
        RemoveRastersFromListBox(VegetationHeightList)
    End Sub

    Private Sub LAIAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LAIAdd.Click
        AddRastersIntoListBox(LAIList, "leaf area index")
    End Sub

    Private Sub LAIRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LAIRemove.Click
        RemoveRastersFromListBox(LAIList)
    End Sub

    Private Sub ZenithAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ZenithAdd.Click
        AddRastersIntoListBox(ZenithList, "zenith angle")
    End Sub

    Private Sub ZenithRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ZenithRemove.Click
        RemoveRastersFromListBox(ZenithList)
    End Sub

    Private Sub FieldCapacityAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FieldCapacityAdd.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load wilting point image"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterRasterDatasets
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        Dim FileInfo As ESRI.ArcGIS.Catalog.IGxObject = List.Next
        FieldCapacityText.Text = FileInfo.FullName

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(FileInfo)
    End Sub

    Private Sub WiltingPointAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WiltingPointAdd.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load wilting point image"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterRasterDatasets
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        Dim FileInfo As ESRI.ArcGIS.Catalog.IGxObject = List.Next
        WiltingPointText.Text = FileInfo.FullName

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(FileInfo)
    End Sub

#End Region

#Region "Cover"

    Private CoverPointIndex As New CoverPointIndex
    Private CoverVariables = {"", "Cover Name", "Kcb Initial", "Kcb Mid", "Kcb End", "Period Initial (days)", "Period Development (days)", "Period Mid (days)", "Period End (days)", "Cover Maximum Height (m)", "Cover Minimum Height (m)", "Root Maximum Depth (m)", "Start Date (day of year)", "p"}
    Private CoverValues As New List(Of Integer)

    Private Sub CoverClassificationAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CoverClassificationAdd.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load cover classification image(s)"
        OpenFileDialog.AllowMultiSelect = True
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterRasterDatasets
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing
        Dim GxObject As ESRI.ArcGIS.Catalog.IGxDataset

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        GxObject = List.Next
        Do
            Dim Path As String = GxObject.Dataset.Workspace.PathName & GxObject.Dataset.Name
            If Not CoverClassificationList.Items.Contains(Path) Then CoverClassificationList.Items.Add(Path)
            If CoverClassificationList.Items.Count = 1 Then
                Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(Path).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
                For F = 0 To Raster.AttributeTable.Fields.FieldCount - 1
                    CoverSelectionBox.Items.Add(Raster.AttributeTable.Fields.Field(F).AliasName)
                    If Raster.AttributeTable.Fields.Field(F).AliasName.Contains("Name") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("NAME") Or Raster.AttributeTable.Fields.Field(F).AliasName.Contains("name") Then CoverSelectionBox.Text = Raster.AttributeTable.Fields.Field(F).AliasName
                Next
                System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
            End If
            GxObject = List.Next
        Loop Until GxObject Is Nothing

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
    End Sub

    Private Sub CoverClassificationRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CoverClassificationRemove.Click
        Dim Indices = CoverClassificationList.SelectedIndices
        For Index = Indices.Count - 1 To 0 Step -1
            CoverClassificationList.Items.RemoveAt(Indices(Index))
        Next
        If CoverClassificationList.Items.Count = 0 Then
            CoverSelectionBox.Items.Clear()
            CoverSelectionBox.Text = ""
            CoverSelectionGrid.Columns.Clear()
        End If
    End Sub

    Private Sub CoverSelectionBox_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CoverSelectionBox.TextChanged
        If CoverClassificationList.Items.Count > 0 Then
            Try
                Dim CoverList As New List(Of String)
                For Item = 0 To [Enum].GetNames(GetType(Cover)).Count - 1
                    CoverList.Add([Enum].GetName(GetType(Cover), Item).Replace("_", " "))
                Next
                CoverList.Sort()
                CoverList.Insert(0, "")

                Dim IrrigationMethodList As New List(Of String)
                For Item = 0 To [Enum].GetNames(GetType(IrrigationMethod)).Count - 1
                    IrrigationMethodList.Add([Enum].GetName(GetType(IrrigationMethod), Item).Replace("_", " "))
                Next
                IrrigationMethodList.Sort()
                IrrigationMethodList.Insert(0, "")

                CoverSelectionGrid.Columns.Clear()
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "Cover", DataGridViewColumns.DataTypes.typeString, True)
                DataGridViewColumns.AddCombo(CoverSelectionGrid, "Cover Classification", CoverList.ToArray)
                DataGridViewColumns.AddCombo(CoverSelectionGrid, "Irrigation Method", IrrigationMethodList.ToArray)
                DataGridViewColumns.AddCheckbox(CoverSelectionGrid, "Include")
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "α VIS", DataGridViewColumns.DataTypes.typeDouble)
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "α NIR", DataGridViewColumns.DataTypes.typeDouble)
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "α TIR", DataGridViewColumns.DataTypes.typeDouble)
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "s", DataGridViewColumns.DataTypes.typeDouble)
                DataGridViewColumns.AddNormal(CoverSelectionGrid, "Wc", DataGridViewColumns.DataTypes.typeDouble)
                For I = 0 To 1
                    CoverSelectionGrid.Columns(I).Width = 110
                Next
                For I = 2 To CoverSelectionGrid.Columns.Count - 1
                    CoverSelectionGrid.Columns(I).Width = 55
                Next
                For I = 0 To CoverSelectionGrid.Columns.Count - 1
                    CoverSelectionGrid.Columns(I).SortMode = Windows.Forms.DataGridViewColumnSortMode.NotSortable
                Next

                Dim Raster As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CreateRasterDataset(CoverClassificationList.Items(0)).CreateDefaultRaster, ESRI.ArcGIS.DataSourcesRaster.IRaster2)
                Dim QueryFilter As ESRI.ArcGIS.Geodatabase.IQueryFilter = New ESRI.ArcGIS.Geodatabase.QueryFilter
                QueryFilter.AddField(CoverSelectionBox.Text)
                Dim Cursor As ESRI.ArcGIS.Geodatabase.ICursor = Raster.AttributeTable.Search(QueryFilter, True)
                Dim Row As ESRI.ArcGIS.Geodatabase.IRow = Cursor.NextRow()
                Dim List As New List(Of Object)
                Dim Index As Integer = Raster.AttributeTable.Fields.FindField(CoverSelectionBox.Text)
                CoverValues.Clear()
                Do While Not Row Is Nothing
                    List.Add(Row.Value(Index))
                    CoverValues.Add(Row.Value(1))
                    Row = Cursor.NextRow()
                Loop
                System.Runtime.InteropServices.Marshal.ReleaseComObject(Raster)
                System.Runtime.InteropServices.Marshal.ReleaseComObject(QueryFilter)
                System.Runtime.InteropServices.Marshal.ReleaseComObject(Cursor)

                For L = 0 To List.Count - 1
                    Dim CoverClass As String = ""
                    For Each Item In CoverList
                        If Not CoverClass = List(L) Then
                            If Item.Contains(List(L)) Then CoverClass = Item
                            If CoverClass = "" And List(L).ToString.Contains(Item) Then CoverClass = Item
                        End If
                    Next
                    CoverSelectionGrid.Rows.Add({List(L), CoverClass, "", True})
                Next

                For I = 0 To CoverSelectionGrid.Rows.Count - 1

                    CoverSelectionGrid.Rows(I).Cells(4).Value = 0.83 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.35 : CoverSelectionGrid.Rows(I).Cells(6).Value = 0.97
                    CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0
                    If CoverSelectionGrid.Rows(I).Cells(1).Value <> "" Then
                        Dim Cover As Cover = DirectCast([Enum].Parse(GetType(Cover), CoverSelectionGrid.Rows(I).Cells(1).Value.Replace(" ", "_")), Cover)
                        Select Case Cover
                            Case Functions.Cover.Bare_Soil
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.83 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.57
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0
                            Case Functions.Cover.Grass
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.2
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05
                            Case Functions.Cover.Corn
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.2
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.76
                            Case Functions.Cover.Soybean
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.85 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.15
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.25
                            Case Functions.Cover.Tamarisk
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.55
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05
                            Case Functions.Cover.Dead_Tamarisk, Functions.Cover.Arrowweed
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.55
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05
                            Case Functions.Cover.Grapes
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.83 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.35
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 2.0
                            Case Functions.Cover.Wheat
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.85 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.4
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.5
                            Case Functions.Cover.Cotton, Functions.Cover.Dryland_Cotton
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.2
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.76
                            Case Functions.Cover.Alfalfa
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.85 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.15
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.0
                            Case Functions.Cover.Agriculture
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.85 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.3
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.0
                            Case Functions.Cover.Grapes
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.88 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.3
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.0
                            Case Functions.Cover.Citrus
                                CoverSelectionGrid.Rows(I).Cells(4).Value = 0.85 : CoverSelectionGrid.Rows(I).Cells(5).Value = 0.3
                                CoverSelectionGrid.Rows(I).Cells(7).Value = 0.05 : CoverSelectionGrid.Rows(I).Cells(8).Value = 0.0

                        End Select
                    End If
                Next
            Catch
            End Try
        End If
    End Sub

    Private Sub CoverSelectionGrid_DataError(sender As Object, e As System.Windows.Forms.DataGridViewDataErrorEventArgs) Handles CoverSelectionGrid.DataError
        MsgBox("The value entered was not a number. Please try again.", MsgBoxStyle.Exclamation, "Not Numeric Value")
    End Sub

    Private Sub CoverPropertiesGrid_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles CoverPropertiesGrid.CellValueChanged
        CoverPointIndex.Initialize()
        For Row = 0 To CoverPropertiesGrid.RowCount - 1
            Select Case CoverPropertiesGrid.Rows(Row).Cells(1).Value
                Case CoverVariables(1)
                    CoverPointIndex.MaximumCoverHeight = Row
                Case CoverVariables(2)
                    CoverPointIndex.MinimumCoverHeight = Row
                Case CoverVariables(3)
                    CoverPointIndex.CoverName = Row
                Case CoverVariables(4)
                    CoverPointIndex.KcbEnd = Row
                Case CoverVariables(5)
                    CoverPointIndex.KcbInitial = Row
                Case CoverVariables(6)
                    CoverPointIndex.KcbMid = Row
                Case CoverVariables(7)
                    CoverPointIndex.P = Row
                Case CoverVariables(8)
                    CoverPointIndex.PeriodDevelopment = Row
                Case CoverVariables(9)
                    CoverPointIndex.PeriodEnd = Row
                Case CoverVariables(10)
                    CoverPointIndex.PeriodInitial = Row
                Case CoverVariables(11)
                    CoverPointIndex.PeriodMid = Row
                Case CoverVariables(12)
                    CoverPointIndex.MaximumRootDepth = Row
                Case CoverVariables(13)
                    CoverPointIndex.DateInitial = Row
            End Select
        Next
    End Sub

    Private Sub CoverPropertiesAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CoverPropertiesAdd.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load cover properties parameter table"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterTables
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub
        Dim GxDataset As ESRI.ArcGIS.Catalog.IGxDataset = List.Next
        CoverPropertiesText.Text = GxDataset.DatasetName.WorkspaceName.PathName & "\" & GxDataset.DatasetName.Name

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
    End Sub

    Private Sub CoverPropertiesTableText_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CoverPropertiesText.TextChanged
        Try
            Dim CoverPropertiesTable = CreateTable(CoverPropertiesText.Text)

            Dim Variables = CoverVariables
            Array.Sort(Variables)

            CoverPropertiesGrid.Columns.Clear()
            DataGridViewColumns.AddNormal(CoverPropertiesGrid, "Column Name", DataGridViewColumns.DataTypes.typeString, True)
            DataGridViewColumns.AddCombo(CoverPropertiesGrid, "Cover Property", Variables)
            CoverPropertiesGrid.Columns(0).Width = 175
            CoverPropertiesGrid.Columns(1).Width = 250

            For Col = 0 To CoverPropertiesTable.Fields.FieldCount - 1
                CoverPropertiesGrid.Rows.Add({CoverPropertiesTable.Fields.Field(Col).Name, "", 1})
            Next

            For R = 0 To CoverPropertiesGrid.RowCount - 1
                Dim FieldName As String = CoverPropertiesGrid.Rows(R).Cells(0).Value.ToString
                If FieldName.Contains("Maximum Cover") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(1)
                ElseIf FieldName.Contains("Minimum Cover") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(2)
                ElseIf FieldName.Contains("Name") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(3)
                ElseIf FieldName.Contains("Kcb3") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(4)
                ElseIf FieldName.Contains("Kcb1") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(5)
                ElseIf FieldName.Contains("Kcb2") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(6)
                ElseIf FieldName = "P" Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(7)
                ElseIf FieldName.Contains("P2") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(8)
                ElseIf FieldName.Contains("P4") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(9)
                ElseIf FieldName.Contains("P1") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(10)
                ElseIf FieldName.Contains("P3") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(11)
                ElseIf FieldName.Contains("Root Depth") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(12)
                ElseIf FieldName.Contains("Start") Then
                    CoverPropertiesGrid.Rows(R).Cells(1).Value = Variables(13)
                End If
            Next
        Catch ex As Exception
        End Try
    End Sub

#End Region

#Region "Weather"

    Private WeatherPointIndex As New WeatherPointIndex
    Private WeatherVariables = {"", "Actual Vapor Pressure (kPa)", "Air Temperature (C)", "Air Temperature Reference Height (m)", "Anemometer Reference Height (m)", "Atmospheric Pressure (kPa)", "Cover Height (m)", "Cover Name", "Instantaneous Short Reference Evapotranspiration (mm/day)", "Irrigation (mm)", "Precipitation (mm)", "Record Date (mm/dd/yyyy)", "Relative Humidity (%)", "Short Reference Evapotranspiration (mm/day)", "Solar Radiation (W/m^2)", "Wind Speed (m/s)"}

    Private Sub WeatherTableAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherTableAdd.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Load weather parameter table"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterTables
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub
        Dim GxDataset As ESRI.ArcGIS.Catalog.IGxDataset = List.Next
        WeatherTableText.Text = GxDataset.DatasetName.WorkspaceName.PathName & "\" & GxDataset.DatasetName.Name

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
    End Sub

    Private Sub WeatherTableText_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles WeatherTableText.TextChanged
        Try
            Dim WeatherTable = CreateTable(WeatherTableText.Text)

            Dim Variables = WeatherVariables
            Array.Sort(Variables)

            WeatherTableGrid.Columns.Clear()
            DataGridViewColumns.AddNormal(WeatherTableGrid, "Column Name", DataGridViewColumns.DataTypes.typeString, True)
            DataGridViewColumns.AddCombo(WeatherTableGrid, "Weather Variable", Variables)
            DataGridViewColumns.AddNormal(WeatherTableGrid, "Multiplier", DataGridViewColumns.DataTypes.typeDouble)
            WeatherTableGrid.Columns(0).Width = 175
            WeatherTableGrid.Columns(1).Width = 175
            WeatherTableGrid.Columns(2).Width = 75

            For Col = 0 To WeatherTable.Fields.FieldCount - 1
                WeatherTableGrid.Rows.Add({WeatherTable.Fields.Field(Col).Name, "", 1})
            Next

            For Row = 0 To WeatherTableGrid.RowCount - 1
                Dim FieldName As String = WeatherTableGrid.Rows(Row).Cells(0).Value.ToString
                If FieldName.Contains("Vapor") Or FieldName.Contains("vapor") Or FieldName.Contains("Ea") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(1)
                ElseIf FieldName.Contains("Air") Or FieldName.Contains("air") Or FieldName.Contains("Ta") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(2)
                ElseIf FieldName.Contains("Zt") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(3)
                ElseIf FieldName.Contains("Anem") Or FieldName.Contains("anem") Or FieldName.Contains("Z") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(4)
                ElseIf FieldName.Contains("Atm") Or FieldName.Contains("atm") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(5)
                ElseIf FieldName.Contains("Height") Or FieldName.Contains("height") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(6)
                ElseIf FieldName.Contains("Cover") Or FieldName.Contains("cover") Or FieldName.Contains("Crop") Or FieldName.Contains("crop") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(7)
                ElseIf FieldName.Contains("Inst") Or FieldName.Contains("inst") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(8)
                ElseIf FieldName.Contains("Irri") Or FieldName.Contains("irri") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(9)
                ElseIf FieldName.Contains("Prec") Or FieldName.Contains("prec") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(10)
                ElseIf FieldName.Contains("Date") Or FieldName.Contains("date") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(11)
                ElseIf FieldName.Contains("Humid") Or FieldName.Contains("humid") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(12)
                ElseIf FieldName.Contains("ETo") Or FieldName.Contains("Eto") Or FieldName.Contains("ref") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(13)
                ElseIf FieldName.Contains("Solar") Or FieldName.Contains("solar") Or FieldName.Contains("Rs") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(14)
                ElseIf FieldName.Contains("Wind") Or FieldName.Contains("wind") Or FieldName.Contains("U") Then
                    WeatherTableGrid.Rows(Row).Cells(1).Value = Variables(15)
                End If
            Next
        Catch ex As Exception
        End Try
    End Sub

    Private Sub WeatherTableGrid_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles WeatherTableGrid.CellValueChanged
        WeatherPointIndex.Initialize()
        For Row = 0 To WeatherTableGrid.RowCount - 1
            Select Case WeatherTableGrid.Rows(Row).Cells(1).Value
                Case WeatherVariables(1)
                    WeatherPointIndex.ActualVaporPressure = Row
                Case WeatherVariables(2)
                    WeatherPointIndex.AirTemperature = Row
                Case WeatherVariables(3)
                    WeatherPointIndex.AirTemperatureReferenceHeight = Row
                Case WeatherVariables(4)
                    WeatherPointIndex.AnemometerReferenceHeight = Row
                Case WeatherVariables(5)
                    WeatherPointIndex.AtmosphericPressure = Row
                Case WeatherVariables(6)
                    WeatherPointIndex.CoverHeight = Row
                Case WeatherVariables(7)
                    WeatherPointIndex.CoverName = Row
                Case WeatherVariables(8)
                    WeatherPointIndex.InstantaneousShortReferenceEvapotranspiration = Row
                Case WeatherVariables(9)
                    WeatherPointIndex.Irrigation = Row
                Case WeatherVariables(10)
                    WeatherPointIndex.Precipitation = Row
                Case WeatherVariables(11)
                    WeatherPointIndex.RecordDate = Row
                Case WeatherVariables(12)
                    WeatherPointIndex.RelativeHumidity = Row
                Case WeatherVariables(13)
                    WeatherPointIndex.ShortReferenceEvapotranspiration = Row
                Case WeatherVariables(14)
                    WeatherPointIndex.SolarRadiation = Row
                Case WeatherVariables(15)
                    WeatherPointIndex.WindSpeed = Row
            End Select
        Next
    End Sub

    Private Sub WeatherTemperatureAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherTemperatureAdd.Click
        AddRastersIntoListBox(WeatherTemperatureList, "temperature")
    End Sub

    Private Sub WeatherTemperatureRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherTemperatureRemove.Click
        RemoveRastersFromListBox(WeatherTemperatureList)
    End Sub

    Private Sub WeatherHumidityAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherHumidityAdd.Click
        AddRastersIntoListBox(WeatherHumidityList, "humidity")
    End Sub

    Private Sub WeatherHumidityRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherHumidityRemove.Click
        RemoveRastersFromListBox(WeatherHumidityList)
    End Sub

    Private Sub WeatherPressureAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherPressureAdd.Click
        AddRastersIntoListBox(WeatherPressureList, "pressure")
    End Sub

    Private Sub WeatherPressureRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherPressureRemove.Click
        RemoveRastersFromListBox(WeatherPressureList)
    End Sub

    Private Sub WeatherWindSpeedAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherWindSpeedAdd.Click
        AddRastersIntoListBox(WeatherWindSpeedList, "wind speed")
    End Sub

    Private Sub WeatherWindSpeedRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherWindSpeedRemove.Click
        RemoveRastersFromListBox(WeatherWindSpeedList)
    End Sub

    Private Sub WeatherRadiationAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherRadiationAdd.Click
        AddRastersIntoListBox(WeatherRadiationList, "solar radiation")
    End Sub

    Private Sub WeatherRadiationRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherRadiationRemove.Click
        RemoveRastersFromListBox(sender)
    End Sub

    Private Sub WeatherETDailyActualAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETDailyActualAdd.Click
        AddRastersIntoListBox(WeatherETDailyActualList, "actual evapotranspiration")
    End Sub

    Private Sub WeatherETDailyActualRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETDailyActualRemove.Click
        RemoveRastersFromListBox(WeatherETDailyActualList)
    End Sub

    Private Sub WeatherETDailyReferenceAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETDailyReferenceAdd.Click
        AddRastersIntoListBox(WeatherETDailyReferenceList, "reference evapotranspiration")
    End Sub

    Private Sub WeatherETDailyReferenceRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETDailyReferenceRemove.Click
        RemoveRastersFromListBox(WeatherETDailyReferenceList)
    End Sub

    Private Sub WeatherETInstantaneousAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETInstantaneousAdd.Click
        AddRastersIntoListBox(WeatherETInstantaneousList, "instantaneous evapotranspiration")
    End Sub

    Private Sub WeatherETInstantaneousRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WeatherETInstantaneousRemove.Click
        RemoveRastersFromListBox(WeatherETInstantaneousList)
    End Sub

#End Region

#Region "Calculation"
    Dim Abort As Boolean = True

#Region "Energy"

    Private Sub OutputDirectoryAddEnergy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputDirectoryAddEnergy.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Choose output location"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterBasicTypes
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        Dim FileInfo As ESRI.ArcGIS.Catalog.IGxObject = List.Next
        OutputDirectoryTextEnergy.Text = FileInfo.FullName

        System.Runtime.InteropServices.Marshal.ReleaseComObject(OpenFileDialog)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Filter)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(List)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(FileInfo)
    End Sub

    Private Sub OutputImagesCheckAllEnergy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputImagesCheckAllEnergy.Click
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            OutputImagesBoxEnergy.SetItemChecked(Item, True)
        Next
    End Sub

    Private Sub OutputImagesUncheckAllEnergy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputImagesUncheckAllEnergy.Click
        For Item = 0 To OutputImagesBoxEnergy.Items.Count - 1
            OutputImagesBoxEnergy.SetItemChecked(Item, False)
        Next
    End Sub

    Private Sub RunEnergy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RunEnergy.Click
        If EnergyBalanceBox.Text = "" Then : TabControl1.SelectedIndex = 0 : EnergyBalanceBox.Focus() : MsgBox("Please select a model.")
        ElseIf ImageSourceBox.Text = "" Then : TabControl1.SelectedIndex = 0 : ImageSourceBox.Focus() : MsgBox("Please select an image source.")
        ElseIf TimeZoneBox.Text = "" Then : TabControl1.SelectedIndex = 0 : TimeZoneBox.Focus() : MsgBox("Please select a time zone.")
        ElseIf MultispectralList.Items.Count = 0 Then : TabControl1.SelectedIndex = 1 : MultispectralAdd.Focus() : MsgBox("Please add at least one multispectral image.")
        ElseIf SurfaceTemperatureList.Items.Count = 0 Then : TabControl1.SelectedIndex = 1 : SurfaceTemperatureAdd.Focus() : MsgBox("Please add at least one surface temperature image.")
        ElseIf CoverClassificationList.Items.Count = 0 Then : TabControl1.SelectedIndex = 2 : CoverClassificationAdd.Focus() : MsgBox("Please add at least one cover classification image.")
        Else
            Dim MultispectralDate As New List(Of DateTime)
            Dim SurfaceTemperatureDate As New List(Of DateTime)
            Dim CoverClassificationDate As New List(Of DateTime)
            Dim VegetationHeightDate As New List(Of DateTime)
            Dim LAIDate As New List(Of DateTime)
            Dim ZenithDate As New List(Of DateTime)
            Dim WeatherGrid As New WeatherGrid : WeatherGrid.Clear()
            Try
                For I = 0 To MultispectralList.Items.Count - 1 : MultispectralDate.Add(GetDateFromPath(MultispectralList.Items(I))) : Next
                For I = 0 To SurfaceTemperatureList.Items.Count - 1 : SurfaceTemperatureDate.Add(GetDateFromPath(SurfaceTemperatureList.Items(I))) : Next
                For I = 0 To CoverClassificationList.Items.Count - 1 : CoverClassificationDate.Add(GetDateFromPath(CoverClassificationList.Items(I))) : Next
                For I = 0 To VegetationHeightList.Items.Count - 1 : VegetationHeightDate.Add(GetDateFromPath(VegetationHeightList.Items(I))) : Next
                For I = 0 To LAIList.Items.Count - 1 : LAIDate.Add(GetDateFromPath(LAIList.Items(I))) : Next
                For I = 0 To ZenithList.Items.Count - 1 : ZenithDate.Add(GetDateFromPath(ZenithList.Items(I))) : Next
            Catch ex As Exception
                TabControl1.SelectedIndex = 1
                MultispectralAdd.Focus()
                MsgBox("All image file names must end with acquisition date stamp, " & DateString & ".")
                Exit Sub
            End Try
            Dim MultispectralImage As New List(Of String)
            Dim SurfaceTemperatureImage As New List(Of String)
            Dim CoverClassificationImage As New List(Of String)
            Dim VegetationHeightImage As New List(Of String)
            Dim LAIImage As New List(Of String)
            Dim ZenithImage As New List(Of String)
            For I = 0 To MultispectralDate.Count - 1
                If SurfaceTemperatureDate.Contains(MultispectralDate(I)) Then
                    MultispectralImage.Add(Format(MultispectralDate(I), "yyyyMMdd") & MultispectralList.Items(I))
                    SurfaceTemperatureImage.Add(Format(MultispectralDate(I), "yyyyMMdd") & SurfaceTemperatureList.Items(SurfaceTemperatureDate.IndexOf(MultispectralDate(I))))
                End If
            Next
            For I = 0 To CoverClassificationDate.Count - 1 : CoverClassificationImage.Add(Format(CoverClassificationDate(I), "yyyyMMdd") & CoverClassificationList.Items(I)) : Next
            For I = 0 To VegetationHeightDate.Count - 1 : VegetationHeightImage.Add(Format(VegetationHeightDate(I), "yyyyMMdd") & VegetationHeightList.Items(I)) : Next
            For I = 0 To LAIDate.Count - 1 : LAIImage.Add(Format(LAIDate(I), "yyyyMMdd") & LAIList.Items(I)) : Next
            For I = 0 To ZenithDate.Count - 1 : ZenithImage.Add(Format(ZenithDate(I), "yyyyMMdd") & ZenithList.Items(I)) : Next
            If MultispectralImage.Count = 0 Then
                TabControl1.SelectedIndex = 1
                MultispectralAdd.Focus()
                MsgBox("No overlapping image dates between multispectral and surface temperature images.")
                Exit Sub
            End If
            MultispectralImage.Sort()
            SurfaceTemperatureImage.Sort()
            CoverClassificationImage.Sort()
            VegetationHeightImage.Sort()
            LAIImage.Sort()
            ZenithImage.Sort()
            For I = 0 To MultispectralImage.Count - 1
                MultispectralImage(I) = MultispectralImage(I).Remove(0, 8)
                SurfaceTemperatureImage(I) = SurfaceTemperatureImage(I).Remove(0, 8)
                Dim RecordDate As DateTime = GetDateFromPath(MultispectralImage(I))
                Dim Index As Integer
                Index = GetSameDateImageIndex(RecordDate, WeatherTemperatureList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.Temperature.Add(WeatherTemperatureList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherHumidityList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.SpecificHumidity.Add(WeatherHumidityList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherPressureList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.Pressure.Add(WeatherPressureList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherWindSpeedList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.WindSpeed.Add(WeatherWindSpeedList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherRadiationList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.Radiation.Add(WeatherRadiationList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherETDailyReferenceList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.ETDailyReference.Add(WeatherETDailyReferenceList.Items(Index))
                Index = GetSameDateImageIndex(RecordDate, WeatherETInstantaneousList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.ETInstantaneous.Add(WeatherETInstantaneousList.Items(Index))
            Next
            For I = 0 To CoverClassificationImage.Count - 1 : CoverClassificationImage(I) = CoverClassificationImage(I).Remove(0, 8) : Next
            For I = 0 To VegetationHeightImage.Count - 1 : VegetationHeightImage(I) = VegetationHeightImage(I).Remove(0, 8) : Next
            For I = 0 To LAIImage.Count - 1 : LAIImage(I) = LAIImage(I).Remove(0, 8) : Next
            For I = 0 To ZenithImage.Count - 1 : ZenithImage(I) = ZenithImage(I).Remove(0, 8) : Next
            If Not ExistsArcGISFile(MultispectralImage) Then Exit Sub
            If Not ExistsArcGISFile(SurfaceTemperatureImage) Then Exit Sub
            If Not ExistsArcGISFile(CoverClassificationImage) Then Exit Sub
            If Not ExistsArcGISFile(VegetationHeightImage) Then Exit Sub
            If Not ExistsArcGISFile(LAIImage) Then Exit Sub
            If Not ExistsArcGISFile(ZenithImage) Then Exit Sub
            If Not ExistsArcGISFile(WeatherGrid.AllValues) Then Exit Sub

            Abort = False
            CalculateEnergyBalance(MultispectralImage, SurfaceTemperatureImage, CoverClassificationImage, VegetationHeightImage, LAIImage, ZenithImage, WeatherGrid)
        End If
    End Sub

    Private Sub ExitRunEnergy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExitRunEnergy.Click
        If Abort = True Then Exit Sub
        CalculationTextEnergy.AppendText(vbNewLine & "Operation aborted..." & Now)
        Abort = True
    End Sub

    Private Sub CalculateEnergyBalance(ByVal MultispectralImages As List(Of String), ByVal SurfaceTemperatureImages As List(Of String), ByVal CoverClassificationImages As List(Of String), ByVal VegetationHeightImages As List(Of String), ByVal LAIImages As List(Of String), ByVal ZenithImages As List(Of String), ByVal WeatherGrid As WeatherGrid)
        Dim Timer As New Stopwatch : Timer.Start()
        ProgressAllEnergy.Maximum = MultispectralImages.Count * 2 + 2 : ProgressAllEnergy.Minimum = 0 : ProgressAllEnergy.Step = 1 : ProgressAllEnergy.Value = 0
        ProgressPartEnergy.Minimum = 0 : ProgressPartEnergy.Step = 1 : ProgressPartEnergy.Value = 0
        CalculationTextEnergy.Clear() : CalculationTextEnergy.AppendText("Determining intersecting area and output raster properties..." & Now) : Windows.Forms.Application.DoEvents()

        Dim InputRasterPath As New List(Of String)
        InputRasterPath.AddRange(MultispectralImages)
        InputRasterPath.AddRange(SurfaceTemperatureImages)
        InputRasterPath.AddRange(CoverClassificationImages)
        InputRasterPath.AddRange(VegetationHeightImages)
        InputRasterPath.AddRange(LAIImages)
        InputRasterPath.AddRange(ZenithImages)
        InputRasterPath.AddRange(WeatherGrid.AllValues)

        For Each File In IO.Directory.GetFiles(IO.Path.GetTempPath)
            Try
                'IO.File.Delete(File)
            Catch ex As Exception
            End Try
        Next

        Dim IntersectRasterPath As String = IO.Path.ChangeExtension(IO.Path.GetTempFileName, ".img")
        Dim InputRasters(InputRasterPath.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterDataset
        Dim IntersectRaster = CreateIntersectRaster(InputRasterPath.ToArray, InputRasters, IntersectRasterPath)
        Dim IntersectRasterValue As ESRI.ArcGIS.Geodatabase.IRasterValue = New ESRI.ArcGIS.Geodatabase.RasterValue
        IntersectRasterValue.RasterDataset = IntersectRaster
        CalculationTextEnergy.AppendText(vbNewLine & "Succeeded at " & Now & vbNewLine & "Creating temporary intersecting datasets...") : Windows.Forms.Application.DoEvents()
        If Abort = True Then Exit Sub

        ProgressPartEnergy.Maximum = GetRasterCursorIterations(IntersectRaster)

        For P = 0 To InputRasterPath.Count - 1
            CalculationTextEnergy.AppendText(vbNewLine & "   For " & IO.Path.GetFileName(InputRasterPath(P)) & "..." & Now) : Windows.Forms.Application.DoEvents()
            ExtractRaster(InputRasterPath(P), InputRasters(P), IntersectRasterPath, IntersectRaster)
            CalculationTextEnergy.AppendText(vbNewLine & "   Succeeded at " & Now) : Windows.Forms.Application.DoEvents()
            If Abort = True Then Exit Sub
        Next
        CalculationTextEnergy.AppendText(vbNewLine & "   For transform raster dataset..." & Now) : Windows.Forms.Application.DoEvents()
        Dim TransformRaster2 = TransformRaster(IntersectRasterPath, IntersectRaster, ESRI.ArcGIS.Geometry.esriSRGeoCSType.esriSRGeoCS_NAD1983)
        CalculationTextEnergy.AppendText(vbNewLine & "   Succeeded at " & Now) : ProgressAllEnergy.PerformStep() : Windows.Forms.Application.DoEvents()

        Dim OutputRasterNames As New List(Of String)
        For I = 0 To OutputImagesBoxEnergy.Items.Count - 1
            If OutputImagesBoxEnergy.GetItemChecked(I) Then OutputRasterNames.Add(OutputImagesBoxEnergy.Items.Item(I))
        Next
        Dim WorkspaceFactory As ESRI.ArcGIS.Geodatabase.IWorkspaceFactory = New ESRI.ArcGIS.DataSourcesRaster.RasterWorkspaceFactoryClass()
        Dim Workspace As ESRI.ArcGIS.Geodatabase.IRasterWorkspace2 = CType(WorkspaceFactory.OpenFromFile(OutputDirectoryTextEnergy.Text, 0), ESRI.ArcGIS.DataSourcesRaster.IRasterWorkspace)
        Dim OutputFileFormat = "IMAGINE Image"

        Dim EnergyBalanceModel As EnergyBalance = DirectCast([Enum].Parse(GetType(EnergyBalance), EnergyBalanceBox.SelectedItem.ToString.Replace(" ", "_")), EnergyBalance)
        Dim ImageSource As ImageSource = DirectCast([Enum].Parse(GetType(ImageSource), ImageSourceBox.SelectedItem.ToString.Replace(" ", "_")), ImageSource)
        Dim WeatherTable = CreateTable(WeatherTableText.Text)
        Dim WeatherPoint As New WeatherPoint
        Dim WeatherGridIndex As New WeatherGridIndex
        Dim WeatherOffset As Integer = MultispectralImages.Count * 2 + CoverClassificationImages.Count + VegetationHeightImages.Count + LAIImages.Count + ZenithImages.Count

        Dim BandIndex(5) As Integer
        BandIndex(0) = -1 : If RedIndex.Text <> "" Then BandIndex(0) = RedIndex.Text - 1
        BandIndex(1) = -1 : If GreenIndex.Text <> "" Then BandIndex(1) = GreenIndex.Text - 1
        BandIndex(2) = -1 : If BlueIndex.Text <> "" Then BandIndex(2) = BlueIndex.Text - 1
        BandIndex(3) = -1 : If NIRIndex.Text <> "" Then BandIndex(3) = NIRIndex.Text - 1
        BandIndex(4) = -1 : If MIR1Index.Text <> "" Then BandIndex(4) = MIR1Index.Text - 1
        BandIndex(5) = -1 : If MIR2Index.Text <> "" Then BandIndex(5) = MIR2Index.Text - 1

        Dim M As Integer = 0
        For M = 0 To MultispectralImages.Count - 1
            CalculationTextEnergy.AppendText(vbNewLine & "Calculating output for " & MultispectralImages(M) & "..." & Now) : Windows.Forms.Application.DoEvents()
            ProgressPartEnergy.Value = 0

            Dim RecordDate As DateTime = GetDateFromPath(MultispectralImages(M))
            Dim ReferenceLongitude As Single = 15 * (TimeZoneInfo.FindSystemTimeZoneById(TimeZoneBox.SelectedItem).BaseUtcOffset.TotalHours)
            Dim CoverClassificationIndex As Integer = GetNearestDateImageIndex(MultispectralImages(M), CoverClassificationImages)
            Dim VegetationHeightIndex As Integer = GetSameDateImageIndex(MultispectralImages(M), VegetationHeightImages)
            Dim LAIIndex As Integer = GetSameDateImageIndex(MultispectralImages(M), LAIImages)
            Dim ZenithIndex As Integer = GetSameDateImageIndex(MultispectralImages(M), ZenithImages)
            WeatherPoint.Populate(WeatherTable, WeatherPointIndex, RecordDate)
            WeatherGridIndex.Initialize(RecordDate, WeatherGrid, WeatherOffset)

            Dim IntersectRasterBand As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = IntersectRaster
            Dim IntersectRaster2 As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CType(IntersectRaster.CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
            Dim IntersectRasterCursor As ESRI.ArcGIS.Geodatabase.IRasterCursor = IntersectRaster2.CreateCursorEx(Nothing)

            Dim InRasterBand(InputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection
            Dim InRaster2(InputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRaster2
            Dim InRasterCursor(InputRasters.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterCursor
            For R = 0 To InputRasters.Count - 1
                InRasterBand(R) = InputRasters(R)
                InRaster2(R) = CType(InputRasters(R), ESRI.ArcGIS.Geodatabase.IRasterDataset2).CreateFullRaster
                InRasterCursor(R) = InRaster2(R).CreateCursorEx(Nothing)
            Next

            Dim OutputRasters(OutputRasterNames.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterDataset
            For I = 0 To OutputImagesBoxEnergy.CheckedItems.Count - 1
                Dim FileName As String = "SETMI " & EnergyBalanceModel.ToString & " " & OutputImagesBoxEnergy.CheckedItems(I).ToString.Split("(")(1).Replace(")", "") & " " & Format(RecordDate, "MM-dd-yyyy") & ".img"

                If ExistsArcGISFile(OutputDirectoryTextEnergy.Text & "\" & FileName) Then DeleteArcGISFile(OutputDirectoryTextEnergy.Text & "\" & FileName)
                Dim OutputRasterDataset = Workspace.CreateRasterDataset(Name:=FileName, _
                                                                        Format:=OutputFileFormat, _
                                                                        Origin:=IntersectRasterValue.Extent.LowerLeft, _
                                                                        columnCount:=IntersectRasterValue.Extent.Width / IntersectRasterValue.RasterStorageDef.CellSize.X, _
                                                                        RowCount:=IntersectRasterValue.Extent.Height / IntersectRasterValue.RasterStorageDef.CellSize.Y, _
                                                                        cellSizeX:=IntersectRasterValue.RasterStorageDef.CellSize.X, _
                                                                        cellSizeY:=IntersectRasterValue.RasterStorageDef.CellSize.Y, _
                                                                        numBands:=1, _
                                                                        PixelType:=ESRI.ArcGIS.Geodatabase.rstPixelType.PT_FLOAT, _
                                                                        SpatialReference:=IntersectRasterValue.Extent.SpatialReference, _
                                                                        Permanent:=True)
                OutputRasters(I) = OutputRasterDataset
            Next

            Dim OutRasterBand(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection
            Dim OutRaster2(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRaster2
            Dim OutRasterCursor(OutputRasters.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterCursor
            Dim OutRasterEdit(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterEdit
            For R = 0 To OutputRasters.Count - 1
                OutRasterBand(R) = OutputRasters(R)
                OutRaster2(R) = CType(CType(OutputRasters(R).CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
                OutRasterCursor(R) = OutRaster2(R).CreateCursorEx(Nothing)
                OutRasterEdit(R) = OutRaster2(R)
            Next
            If Abort = True Then Exit Sub
            ProgressAllEnergy.PerformStep() : Windows.Forms.Application.DoEvents()

            Do
                Dim IntersectPixels As System.Array = CType(CType(IntersectRasterCursor.PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim MultispectralPixelBlock As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3 = InRasterCursor(M).PixelBlock
                Dim MultispectralPixels(MultispectralPixelBlock.Planes - 1) As System.Array
                For I = 0 To MultispectralPixelBlock.Planes - 1
                    MultispectralPixels(I) = CType(MultispectralPixelBlock.PixelData(I), System.Array)
                Next
                Dim Offset = MultispectralImages.Count
                Dim TemperaturePixels As System.Array = CType(CType(InRasterCursor(Offset + M).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Offset += SurfaceTemperatureImages.Count
                Dim CoverPixels As System.Array = CType(CType(InRasterCursor(Offset + CoverClassificationIndex).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Offset += CoverClassificationImages.Count
                Dim VegetationHeightPixels As System.Array = Nothing
                If VegetationHeightIndex > -1 Then VegetationHeightPixels = CType(CType(InRasterCursor(Offset + VegetationHeightIndex).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Offset += VegetationHeightImages.Count
                Dim LAIPixels As System.Array = Nothing
                If LAIIndex > -1 Then LAIPixels = CType(CType(InRasterCursor(Offset + LAIIndex).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Offset += LAIImages.Count
                Dim ZenithPixels As System.Array = Nothing
                If ZenithIndex > -1 Then ZenithPixels = CType(CType(InRasterCursor(Offset + ZenithIndex).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherTemperaturePixels As System.Array = Nothing
                If WeatherGridIndex.Temperature > -1 Then WeatherTemperaturePixels = CType(CType(InRasterCursor(WeatherGridIndex.Temperature).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherHumidityPixels As System.Array = Nothing
                If WeatherGridIndex.SpecificHumidity > -1 Then WeatherHumidityPixels = CType(CType(InRasterCursor(WeatherGridIndex.SpecificHumidity).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherPressurePixels As System.Array = Nothing
                If WeatherGridIndex.Pressure > -1 Then WeatherPressurePixels = CType(CType(InRasterCursor(WeatherGridIndex.Pressure).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherWindSpeedPixels As System.Array = Nothing
                If WeatherGridIndex.WindSpeed > -1 Then WeatherWindSpeedPixels = CType(CType(InRasterCursor(WeatherGridIndex.WindSpeed).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherRadiationPixels As System.Array = Nothing
                If WeatherGridIndex.Radiation > -1 Then WeatherRadiationPixels = CType(CType(InRasterCursor(WeatherGridIndex.Radiation).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherETDailyReferencePixels As System.Array = Nothing
                If WeatherGridIndex.ETDailyReference > -1 Then WeatherETDailyReferencePixels = CType(CType(InRasterCursor(WeatherGridIndex.ETDailyReference).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim WeatherETInstantaneousPixels As System.Array = Nothing
                If WeatherGridIndex.ETInstantaneous > -1 Then WeatherETInstantaneousPixels = CType(CType(InRasterCursor(WeatherGridIndex.ETInstantaneous).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
                Dim OutRasterPixelBlock(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3
                Dim OutPixels(OutputRasters.Count - 1) As System.Array
                For I = 0 To OutputRasters.Count - 1
                    OutRasterPixelBlock(I) = OutRasterCursor(I).PixelBlock
                    OutPixels(I) = CType(OutRasterPixelBlock(I).PixelData(0), System.Array)
                Next

                Dim ColumnCount As Integer = MultispectralPixelBlock.Width
                Threading.Tasks.Parallel.For(0, MultispectralPixelBlock.Height * MultispectralPixelBlock.Width, _
                 Sub(I)
                     Dim Row As Integer = Int(I / ColumnCount)
                     Dim Col As Integer = I - ColumnCount * Row
                     If IntersectPixels.GetValue(Col, Row) = 1 Then
                         Dim CoverIndex As Integer = CoverValues.IndexOf(CoverPixels.GetValue(Col, Row))
                         If CoverIndex > -1 Then
                             Dim f
                             If CoverIndex = 4 Then
                                 f = 4
                             End If

                             Dim IWeather As Integer = WeatherPoint.CoverName.IndexOf(CoverSelectionGrid.Rows(CoverIndex).Cells(0).Value)
                             If CoverSelectionGrid.Rows(CoverIndex).Cells(3).Value = True And IWeather > -1 Then
                                 Dim Cover As Cover = DirectCast([Enum].Parse(GetType(Cover), CoverSelectionGrid.Rows(CoverIndex).Cells(1).Value.Replace(" ", "_")), Cover)
                                 Dim Red As Single = 0 : If BandIndex(0) > -1 Then Red = MultispectralPixels(BandIndex(0)).GetValue(Col, Row)
                                 Dim Green As Single = 0 : If BandIndex(1) > -1 Then Green = MultispectralPixels(BandIndex(1)).GetValue(Col, Row)
                                 Dim Blue As Single = 0 : If BandIndex(2) > -1 Then Blue = MultispectralPixels(BandIndex(2)).GetValue(Col, Row)
                                 Dim NIR As Single = 0 : If BandIndex(3) > -1 Then NIR = MultispectralPixels(BandIndex(3)).GetValue(Col, Row)
                                 Dim MIR1 As Single = 0 : If BandIndex(4) > -1 Then MIR1 = MultispectralPixels(BandIndex(4)).GetValue(Col, Row)
                                 Dim MIR2 As Single = 0 : If BandIndex(5) > -1 Then MIR2 = MultispectralPixels(BandIndex(5)).GetValue(Col, Row)
                                 Dim Temperature As Single = TemperaturePixels.GetValue(Col, Row) + 273.15

                                 'if some classes come with tmeprature = 0 , ignore
                                 If TemperaturePixels.GetValue(Col, Row) = 0.0 Then
                                     Exit Sub
                                 End If
                                 Dim CoverHeight As Single = 0
                                 If VegetationHeightIndex > -1 Then CoverHeight = VegetationHeightPixels.GetValue(Col, Row)
                                 Dim LAI As Single = 0
                                 If LAIIndex > -1 Then LAI = LAIPixels.GetValue(Col, Row)
                                 Dim ViewZenith As Single = 0
                                 If ZenithIndex > -1 Then ViewZenith = Math.Abs(ZenithPixels.GetValue(Col, Row) - 65)
                                 Dim AirTemperature As Single = 0 'in k
                                 If WeatherGridIndex.Temperature > -1 Then : AirTemperature = WeatherTemperaturePixels.GetValue(Col, Row) : Else : AirTemperature = WeatherPoint.AirTemperature(IWeather) + 273.15 : End If
                                 Dim Rs As Single = 0 ' in W/m2
                                 If WeatherGridIndex.Radiation > -1 Then : Rs = WeatherRadiationPixels.GetValue(Col, Row) : Else : Rs = WeatherPoint.SolarRadiation(IWeather) : End If

                                 Dim WindSpeed As Single = 0 ' in m/s
                                 If WeatherGridIndex.WindSpeed > -1 Then : WindSpeed = WeatherWindSpeedPixels.GetValue(Col, Row) : Else : WindSpeed = WeatherPoint.WindSpeed(IWeather) : End If
                                 Dim WindHeight As Single = WeatherPoint.AnemometerReferenceHeight(IWeather)
                                 Dim TemperatureHeight As Single = WeatherPoint.AirTemperatureReferenceHeight(IWeather)
                                 Dim WindSpeed2m As Single = calcU2(WindSpeed, WindHeight, 1) ' kept as it is, this option is kept for future applications if needed
                                 Dim DailyReferenceET As Single = 0 ' in mm/day
                                 If WeatherGridIndex.ETDailyReference > -1 Then : DailyReferenceET = WeatherETDailyReferencePixels.GetValue(Col, Row) : Else : DailyReferenceET = WeatherPoint.ETDailyReference(IWeather) : End If
                                 Dim InstantaneousET As Single = 0 ' in mm/day
                                 If WeatherGridIndex.ETInstantaneous > -1 Then : InstantaneousET = WeatherETInstantaneousPixels.GetValue(Col, Row) : Else : InstantaneousET = WeatherPoint.ETInstantaneous(IWeather) : End If
                                 Dim Pressure As Single = 0 ' in kPa if from tables or Pa if from gridded and then converted to mb
                                 If WeatherGridIndex.Pressure > -1 Then : Pressure = WeatherPressurePixels.GetValue(Col, Row) * 0.01 : Else : Pressure = WeatherPoint.AtmosphericPressure(IWeather) * 10 : End If

                                 Dim Ea As Single = 0 ' in kPa and then needs to be converted to mb
                                 If WeatherGridIndex.SpecificHumidity > -1 Then
                                     Dim SpecificHumidity As Single = 0
                                     SpecificHumidity = WeatherHumidityPixels.GetValue(Col, Row) ' (kg/kg)
                                     Ea = calcActualVaporPressure(SpecificHumidity, Pressure)
                                 Else
                                     Ea = WeatherPoint.ActualVaporPressure(IWeather) * 10
                                 End If

                                 Dim Tr As Single = 1 - 373.15 / AirTemperature
                                 Dim Es As Single = 1013.25 * Math.Exp(13.3185 * Tr - 1.976 * Tr ^ 2 - 0.6445 * Tr ^ 3 - 0.1299 * Tr ^ 4)

                                 Dim Albedo As Single = calcAlbedo(Red, NIR)
                                 Dim SAVI As Single = calcSAVI(Red, NIR)
                                 Dim oSAVI As Single = calcOSAVI(Red, NIR)
                                 Dim NDVI As Single = calcNDVI(Red, NIR)
                                 Dim NDWI As Single = calcNDWI(MIR1, NIR)

                                 Dim MaximumCoverHeight As Single = 0
                                 Dim FractionOfCover As Single

                                 FractionOfCover = calcFc(Cover, NDVI, SAVI, LAI)

                                 'this is to avoid some pixels with negative or zero values
                                 If SAVI <= 0 Or NDVI <= 0 Or oSAVI <= 0 Then
                                     Exit Sub
                                 End If
                                 Select Case ImageSource
                                     Case Functions.ImageSource.Airborn
                                         If LAIIndex < 0 Then LAI = calcLAILandSAT(NDVI, NDWI, SAVI, oSAVI, Cover, FractionOfCover)
                                     Case Functions.ImageSource.LandSAT
                                         If LAIIndex < 0 Then LAI = calcLAILandSAT(NDVI, NDWI, SAVI, oSAVI, Cover, FractionOfCover)
                                 End Select




                                 Select Case ImageSource
                                     Case Functions.ImageSource.Airborn
                                         MaximumCoverHeight = calcHcAir(NDVI, NDWI, SAVI, oSAVI, FractionOfCover, Cover)
                                     Case Functions.ImageSource.LandSAT
                                         MaximumCoverHeight = calcHcLandSAT(NDVI, NDWI, SAVI, oSAVI, FractionOfCover, Cover)
                                 End Select

                                 ' canopy height should not be larger than Z and Zt
                                 If MaximumCoverHeight > WindHeight Then
                                     WindHeight = WindHeight
                                 End If
                                 If CoverHeight > 0 Then MaximumCoverHeight = Limit(CoverHeight, 0.1, Math.Max(WindHeight - 0.5, TemperatureHeight - 0.5))
                                 If MaximumCoverHeight > 0 Then MaximumCoverHeight = Limit(MaximumCoverHeight, 0.1, Math.Max(WindHeight - 0.5, TemperatureHeight - 0.5))

                                 Dim Rn As Single = 0
                                 Dim G As Single = 0
                                 Dim Rah As Single = 0
                                 Dim H As Single = 0
                                 Dim ET As Single = 0
                                 Dim Taerodynamic As Single = 0
                                 Dim LE As Single = 0

                                 Dim Bioproperties As New Bioproperties
                                 Bioproperties.AlphaVIS = CoverSelectionGrid.Rows(CoverIndex).Cells(4).Value
                                 Bioproperties.AlphaNIR = CoverSelectionGrid.Rows(CoverIndex).Cells(5).Value
                                 Bioproperties.AlphaTIR = CoverSelectionGrid.Rows(CoverIndex).Cells(6).Value
                                 Bioproperties.s = CoverSelectionGrid.Rows(CoverIndex).Cells(7).Value
                                 Bioproperties.Wc = CoverSelectionGrid.Rows(CoverIndex).Cells(8).Value


                                 Select Case EnergyBalanceModel
                                     Case EnergyBalance.One_Layer
                                         Dim Zom As Single = 0.123 * MaximumCoverHeight
                                         Dim Zoh As Single = 0.1 * Zom
                                         Dim D As Single = 0.67 * MaximumCoverHeight
                                         Dim Cp As Single = 1157.46 'need
                                         Dim Ustarn As Single = Math.Max(WindSpeed * K / Math.Log((WindHeight - D) / Zom), 0.01)
                                         Select Case Cover
                                             Case Functions.Cover.Corn, Functions.Cover.Soybean
                                                 Taerodynamic = 273.15 + calcTaerodynamic(Temperature - 273.15, AirTemperature - 273.15, WindSpeed, LAI)
                                             Case Functions.Cover.Tamarisk, Functions.Cover.Dead_Tamarisk
                                                 'Taerodynamic = 273.15 + calctaerodynamic((temp - 273.15), TaM(0, DD), uM(0, DD), lai)
                                                 Taerodynamic = Math.Min(273.15 + 1.48 * (Temperature - 273.15) - 0.48 * (AirTemperature - 273.15) - 2.47 * LAI - 0.68 * WindSpeed + 8.32, 273.15)
                                                 Dim Tair_Tamarisk As Single = Math.Min(273.15 + (26.6 * Math.Log(Taerodynamic - 273.15) - 62.9), 273.15)
                                             Case Functions.Cover.Alfalfa
                                             Case Functions.Cover.Cotton
                                             Case Functions.Cover.Grass
                                             Case Functions.Cover.Wheat
                                             Case Functions.Cover.Agriculture
                                         End Select
                                         Rn = calcRn(SAVI, NDVI, Albedo, AirTemperature, Temperature, Rs, Ea, Esoil, Eveg, Sigma, RecordDate.Month, Cover, FractionOfCover)
                                         G = calcG(Rn, LAI, Cover)
                                         Dim Rahn As Single = Math.Log((WindHeight - D) / Zom) * Math.Log((WindHeight - D) / Zoh) / WindSpeed / K ^ 2
                                         Dim Resistances As Resistances_Output
                                         If (Taerodynamic - AirTemperature) > 0 Then
                                             Resistances = calcRaMO_Unstable_OLM(AirTemperature, Taerodynamic, WindSpeed, MaximumCoverHeight, Rahn, Ustarn, Zom, Zoh, D, K, Cp, WindHeight, Gravity)
                                             'rahYmYh = RaMO_Hatim(Ta, Taerodynamic, u, hc)
                                         Else
                                             Resistances = calcRaMO_Stable_OLM(AirTemperature, Taerodynamic, WindSpeed, MaximumCoverHeight, Rahn, Ustarn, Zom, Zoh, D, K, Cp, WindHeight, Gravity)
                                             'rahYmYh = RaMO_stable_Hatim(Ta, Taerodynamic, u, hc)
                                         End If
                                         Rah = Resistances.Rah
                                         If Resistances.Rah <> 0 Then
                                             H = Cp * (Taerodynamic - AirTemperature) / Resistances.Rah
                                             If (H + G) < Rn Then LE = Rn - H - G
                                         End If
                                     Case EnergyBalance.Two_Source
                                         Dim Cveg As Single = 0.5
                                         Select Case Cover
                                             Case Cover.Corn
                                                 Cveg = 0.5
                                             Case Cover.Soybean
                                                 Cveg = 0.5
                                         End Select

                                         Dim L_MO As Single = -80

                                         ' note that minimum canopy height is set to 0.1 even for bare soil
                                         MaximumCoverHeight = Math.Max(MaximumCoverHeight, 0.1)
                                         Dim Zom As Single = MaximumCoverHeight / 8
                                         Dim Zoh As Single = Zom / 7
                                         Dim D As Single = 2 / 3 * MaximumCoverHeight

                                         ' Other method for getting Zom, Zoh, and D ' Martha's code
                                         Dim cd As Single = 0.2

                                         If FractionOfCover <= FcoverMin Or LAI <= LAIMin Then '
                                             'Zom = 0.1 / 8
                                             Zom = 0.005  'recent update from Martha's code
                                             D = 0
                                         ElseIf Cover = Functions.Cover.Water Then 'for water surface
                                             Zom = 0.00035
                                             D = 0
                                         Else
                                             Dim ufact As Single = 0.36 - 0.264 * Math.Exp(-15.1 * cd * LAI)
                                             Dim xn As Single = cd * LAI / (2 * ufact ^ 2)
                                             Dim dispdh As Single = 0.7 - (1 / (5 * xn) * (1 - Math.Exp(-3.3 * xn)))
                                             If dispdh < 0 Then dispdh = 0
                                             Dim Zomdh As Single = (1 - dispdh) * Math.Exp(-0.4 / ufact)
                                             D = dispdh * MaximumCoverHeight
                                             Zom = Math.Max(Zomdh * MaximumCoverHeight, 0.005)
                                         End If

                                         Dim PixelLatitude As Single = 0
                                         Dim PixelLongitude As Single = 0
                                         TransformRaster2.PixelToMap(InRasterCursor(M).TopLeft.X + Col, InRasterCursor(M).TopLeft.Y + Row, PixelLongitude, PixelLatitude)

                                         Dim WPT = calcW(AirTemperature, Ea, Pressure, Es, Tr)
                                         Dim SunZenith = calcSunZenith(RecordDate, PixelLatitude, PixelLongitude, ReferenceLongitude)  'in degrees
                                         Dim Clump_Sun = calcZenithClumping(NDVI, SunZenith, ViewZenith, LAI, MaximumCoverHeight, Cveg, FractionOfCover, Cover, Bioproperties)
                                         Dim Ftheta = calcFtheta(Clump_Sun.ClumpView, LAI, Cveg, ViewZenith)
                                         Dim RnCoefficients = calcRnCoefficients(Rs, Clump_Sun.ClumpSun, LAI, SunZenith, Cover, FractionOfCover, Bioproperties)
                                         Dim Ag = calcAg(NDVI)
                                         Dim TInitial As New TInitial_Output
                                         TInitial = calcTInitial(Temperature, AirTemperature, Ftheta)
                                         If Temperature = 273.15 Then
                                             Temperature = Temperature
                                         End If
                                         Dim EnergyComponents As New EnergyComponents_Output
                                         Dim Resistances As New Resistances_Output
                                         Dim Stability As Integer = 0
                                         For Counter = 1 To 50

                                             ':::if in case of stable conditions
                                             If L_MO > 0 Then
                                                 EnergyComponents = calcRaMO_Stable_TSM(Resistances, AirTemperature, MaximumCoverHeight, L_MO, WindSpeed, FractionOfCover, Clump_Sun.Clump0, LAI, TInitial, Temperature, Ftheta, Rs, Ea, RecordDate.Month, Zom, Zoh, D, WindHeight, TemperatureHeight, Ag, Bioproperties.s, RnCoefficients, WPT, Cover)
                                                 Stability = EnergyComponents.Stability
                                                 'ElseIf Math.Abs((WindHeight - D) / L_MO) < 0.00001 Then
                                                 '    EnergyComponents = calcRaMO_Neutral_TSM(Resistances, WindSpeed, WindHeight, TemperatureHeight, L_MO, Temperature, D, Ftheta, Ag, AirTemperature, calcTInitial(Temperature, AirTemperature, Ftheta).Tsoil, Rs, Ea, RecordDate, NDVI, Albedo, SAVI, LAI, Bioproperties.s, FractionOfCover, Zoh, Zom, MaximumCoverHeight, Clump_Sun.Clump0, WPT, RnCoefficients, Cover)
                                                 '    Stability = 1
                                                 '::: in case of unstable conditions
                                             ElseIf L_MO < 0 Then
                                                 EnergyComponents = calcRaMO_Unstable_TSM(Resistances, WindHeight, TemperatureHeight, Clump_Sun.Clump0, Ag, Ea, TInitial, Rs, RecordDate.Month, RnCoefficients, MaximumCoverHeight, Ftheta, Temperature, AirTemperature, FractionOfCover, Bioproperties.s, Zoh, LAI, D, L_MO, WindSpeed, Zom, WPT, Cover, Albedo)
                                             End If

                                             EnergyComponents.HTotal = EnergyComponents.Hcanopy + EnergyComponents.Hsoil
                                             EnergyComponents.ETotal = EnergyComponents.EVsoil + EnergyComponents.Ecanopy


                                             If Stability > 0 Then Exit For

                                             Dim LV As Single = 2501300 - 2366 * (AirTemperature - 273.15)
                                             Dim L_MO_new As Single = -WPT.CpRho * AirTemperature * Resistances.Ustar ^ 3 / (K * Gravity * (EnergyComponents.HTotal + 0.61 * AirTemperature * WPT.Cp2 * (EnergyComponents.ETotal) / LV))

                                             If Math.Abs(L_MO - L_MO_new) >= 0.01 Then
                                                 L_MO = L_MO_new
                                             Else
                                                 Exit For
                                             End If
                                         Next

                                         G = EnergyComponents.GTotal
                                         Rn = EnergyComponents.RnTotal
                                         H = EnergyComponents.HTotal
                                         LE = EnergyComponents.ETotal


                                     Case EnergyBalance.SEBAL_Idaho

                                 End Select

                                 ET = calcET(G, Rn, LE, AirTemperature, 0, InstantaneousET, DailyReferenceET, ETExtrapolation.Reference_Evapotranspiration)

                                 'Writing to output rasters
                                 Dim CountOut As Integer = 0
                                 If OutputImagesBoxEnergy.GetItemChecked(0) Then OutPixels(CountOut).SetValue(Clean(Rah), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(1) Then OutPixels(CountOut).SetValue(Clean(Taerodynamic), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(2) Then OutPixels(CountOut).SetValue(Clean(Albedo), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(3) Then OutPixels(CountOut).SetValue(Clean(ET), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(4) Then OutPixels(CountOut).SetValue(CleanNull_2(LE), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(5) Then OutPixels(CountOut).SetValue(Clean(LAI), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(6) Then OutPixels(CountOut).SetValue(CleanNull_2(Rn), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(7) Then OutPixels(CountOut).SetValue(Clean(NDVI), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(8) Then OutPixels(CountOut).SetValue(Clean(oSAVI), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(9) Then OutPixels(CountOut).SetValue(CleanNull_2(H), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(10) Then OutPixels(CountOut).SetValue(Clean(SAVI), {Col, Row}) : CountOut += 1
                                 If OutputImagesBoxEnergy.GetItemChecked(11) Then OutPixels(CountOut).SetValue(CleanNull_2(G), {Col, Row}) : CountOut += 1
                             End If
                         End If
                     Else
                         Dim CountOut As Integer = 0
                         For Output = 0 To 11
                             If OutputImagesBoxEnergy.GetItemChecked(Output) Then OutPixels(CountOut).SetValue(Single.MinValue, {Col, Row}) : CountOut += 1
                         Next
                     End If
                 End Sub)

                IntersectRasterCursor.Next()
                For I = 0 To OutputRasters.Count - 1
                    OutRasterPixelBlock(I).PixelData(0) = OutPixels(I)

                    OutRasterEdit(I).Write(CType(OutRasterCursor(I).TopLeft, ESRI.ArcGIS.Geodatabase.IPnt), OutRasterPixelBlock(I))
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterPixelBlock(I))
                Next
                For I = 1 To InputRasters.Count - 1
                    InRasterCursor(I).Next()
                Next
                For I = 0 To OutputRasters.Count - 1
                    OutRasterCursor(I).Next()
                Next

                System.Runtime.InteropServices.Marshal.ReleaseComObject(MultispectralPixelBlock)
                ProgressPartEnergy.PerformStep()
                If Abort = True Then Exit Sub : Windows.Forms.Application.DoEvents()
            Loop While InRasterCursor(0).Next = True
            ProgressAllEnergy.PerformStep() : Windows.Forms.Application.DoEvents()

            CalculationTextEnergy.AppendText(vbNewLine & "   Calculating output image statistics...") : Windows.Forms.Application.DoEvents()
            For I = 0 To OutputRasters.Count - 1
                Dim Geoprocessor As New ESRI.ArcGIS.Geoprocessor.Geoprocessor

<<<<<<< HEAD
                Geoprocessor.Execute(New ESRI.ArcGIS.DataManagementTools.CalculateStatistics(OutputRasters(I)), Nothing)
=======
                Geoprocessor.AddOutputsToMap = False
                Dim SetRasterProperties As New ESRI.ArcGIS.DataManagementTools.SetRasterProperties
                SetRasterProperties.in_raster = OutputRasters(I)
                SetRasterProperties.nodata = "1 -3.40282346638529E+38"
                Geoprocessor.Execute(SetRasterProperties, Nothing)

                Geoprocessor.AddOutputsToMap = True
                Dim CalculateStatistics As New ESRI.ArcGIS.DataManagementTools.CalculateStatistics()
                CalculateStatistics.in_raster_dataset = OutputRasters(I)
                CalculateStatistics.ignore_values = Single.MinValue
                Geoprocessor.Execute(CalculateStatistics, Nothing)
>>>>>>> origin/master

                System.Runtime.InteropServices.Marshal.ReleaseComObject(OutputRasters(I))
                System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRaster2(I))
                System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterBand(I))
                System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterCursor(I))
                System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterEdit(I))
            Next

            CalculationTextEnergy.AppendText(vbNewLine & "Succeeded at " & Now) : Windows.Forms.Application.DoEvents()
        Next

        CalculationTextEnergy.AppendText(vbNewLine & "   Deleting temporary datasets...") : Windows.Forms.Application.DoEvents()
        For I = 0 To InputRasters.Count - 1
            Dim Path As String = InputRasters(I).CompleteName
            DeleteArcGISFile(Path)
            System.Runtime.InteropServices.Marshal.ReleaseComObject(InputRasters(I))
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(IntersectRaster)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(IntersectRasterValue)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(TransformRaster2)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(WeatherTable)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Workspace)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(WorkspaceFactory)
        Timer.Stop() : ProgressAllEnergy.PerformStep() : CalculationTextEnergy.AppendText(vbNewLine & "Elasped time (" & Timer.Elapsed.ToString & ").")
    End Sub

#End Region

#Region "Water Balance"

    Private Sub OutputDirectoryAddWater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputDirectoryAddWater.Click
        Dim OpenFileDialog As ESRI.ArcGIS.CatalogUI.IGxDialog = New ESRI.ArcGIS.CatalogUI.GxDialog
        OpenFileDialog.Title = "Choose output location"
        OpenFileDialog.AllowMultiSelect = False
        Dim Filter As ESRI.ArcGIS.Catalog.IGxObjectFilter = New ESRI.ArcGIS.Catalog.GxFilterBasicTypes
        OpenFileDialog.ObjectFilter = Filter
        Dim List As ESRI.ArcGIS.Catalog.IEnumGxObject = Nothing

        If Not OpenFileDialog.DoModalOpen(Me.Handle, List) Then Exit Sub

        Dim FileInfo As ESRI.ArcGIS.Catalog.IGxObject = List.Next
        OutputDirectoryTextWater.Text = FileInfo.FullName
    End Sub

    Private Sub OutputImagesCheckAllWater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputImagesCheckAllWater.Click
        For Item = 0 To OutputImagesBoxWater.Items.Count - 1
            OutputImagesBoxWater.SetItemChecked(Item, True)
        Next
    End Sub

    Private Sub OutputImagesUncheckAllWater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OutputImagesUncheckAllWater.Click
        For Item = 0 To OutputImagesBoxWater.Items.Count - 1
            OutputImagesBoxWater.SetItemChecked(Item, False)
        Next
    End Sub

    Private Sub CalculationCoordinatesAdd_Click(sender As System.Object, e As System.EventArgs) Handles CalculationCoordinatesAdd.Click
        Me.Hide()

        Dim UID As New ESRI.ArcGIS.esriSystem.UID
        UID.Value = "SETMI.Coordinatetool"

        Dim CommandItem As ESRI.ArcGIS.Framework.ICommandItem = SETMItool.ArcApplication.Document.CommandBars.Find(UID)
        Dim Command As ESRI.ArcGIS.SystemUI.ICommand = CommandItem.Command
        Dim CoordinateData As Coordinatetool = CType(Command, Coordinatetool)

        CommandItem.Execute()
    End Sub

    Private Sub CalculationCoordinatesRemove_Click(sender As System.Object, e As System.EventArgs) Handles CalculationCoordinatesRemove.Click
        For Each Row In CalculationCoordinatesGrid.SelectedRows
            CalculationCoordinatesGrid.Rows.Remove(Row)
        Next
    End Sub

    Private Sub RunWater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RunWater.Click
        For I = 0 To CoverSelectionGrid.Rows.Count - 1
            If CoverSelectionGrid.Rows(I).Cells(3).Value = True And CoverSelectionGrid.Rows(I).Cells(2).Value = "" Then
                TabControl1.SelectedIndex = 2
                CoverSelectionGrid.ClearSelection()
                CoverSelectionGrid.Rows(I).Cells(2).Selected = True
                MsgBox("Please select an irrigation method for " & CoverSelectionGrid.Rows(I).Cells(0).Value & ".")
                Exit Sub
            End If
        Next
        If WaterBalanceBox.Text = "" Then : TabControl1.SelectedIndex = 0 : WaterBalanceBox.Focus() : MsgBox("Please select a model.")
        ElseIf CoverClassificationList.Items.Count = 0 Then : TabControl1.SelectedIndex = 2 : CoverClassificationAdd.Focus() : MsgBox("Please add at least one cover classification image.")
        Else
            Dim MultispectralDate As New List(Of DateTime)
            Dim CoverClassificationDate As New List(Of DateTime)
            Dim WeatherGrid As New WeatherGrid : WeatherGrid.Clear()
            Try
                For I = 0 To MultispectralList.Items.Count - 1 : MultispectralDate.Add(GetDateFromPath(MultispectralList.Items(I))) : Next
                For I = 0 To CoverClassificationList.Items.Count - 1 : CoverClassificationDate.Add(GetDateFromPath(CoverClassificationList.Items(I))) : Next
            Catch ex As Exception
                TabControl1.SelectedIndex = 1
                MultispectralAdd.Focus()
                MsgBox("All image file names must end with acquisition date stamp, " & DateString & ".")
                Exit Sub
            End Try
            Dim MultispectralImage As New List(Of String)
            Dim CoverClassificationImage As New List(Of String)
            For I = 0 To MultispectralDate.Count - 1
                MultispectralImage.Add(Format(MultispectralDate(I), "yyyyMMdd") & MultispectralList.Items(I))
            Next
            For I = 0 To CoverClassificationDate.Count - 1
                CoverClassificationImage.Add(Format(CoverClassificationDate(I), "yyyyMMdd") & CoverClassificationList.Items(I))
            Next
            MultispectralImage.Sort()
            CoverClassificationImage.Sort()
            For I = 0 To MultispectralImage.Count - 1
                MultispectralImage(I) = MultispectralImage(I).Remove(0, 8)
                Dim RecordDate As DateTime = GetDateFromPath(MultispectralImage(I))
                Dim Index As Integer = GetSameDateImageIndex(RecordDate, WeatherETDailyActualList.Items.Cast(Of [String])().ToList())
                If Index > -1 Then WeatherGrid.ETDailyActual.Add(WeatherETDailyActualList.Items(Index))
            Next
            For I = 0 To CoverClassificationImage.Count - 1
                CoverClassificationImage(I) = CoverClassificationImage(I).Remove(0, 8)
            Next
            If Not FileExists(MultispectralList, MultispectralImage, 1) Then Exit Sub
            If Not FileExists(CoverClassificationList, CoverClassificationImage, 1) Then Exit Sub
            If Not FileExists(FieldCapacityText, 1) Then Exit Sub
            If Not FileExists(WiltingPointText, 1) Then Exit Sub
            If Not ExistsArcGISFile(WeatherGrid.ETDailyActual) Then Exit Sub

            Abort = False
            CalculateWaterBalance(MultispectralImage, CoverClassificationImage, WeatherGrid)
        End If
    End Sub

    Private Sub ExitRunWater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExitRunWater.Click
        If Abort = True Then Exit Sub
        CalculationTextWater.AppendText(vbNewLine & "Operation aborted..." & Now)
        Abort = True
    End Sub

    Private Sub CalculateWaterBalance(ByVal MultispectralImages As List(Of String), ByVal CoverClassificationImages As List(Of String), ByVal WeatherGrid As WeatherGrid)
        Dim Timer As New Stopwatch : Timer.Start()
        ProgressAllWater.Maximum = 3 : ProgressAllWater.Minimum = 0 : ProgressAllWater.Step = 1 : ProgressAllWater.Value = 0
        ProgressPartWater.Minimum = 0 : ProgressPartWater.Step = 1 : ProgressPartWater.Value = 0
        CalculationTextWater.Clear() : CalculationTextWater.AppendText("Determining intersecting area and output raster properties..." & Now) : Windows.Forms.Application.DoEvents()

        Dim InputRasterPath As New List(Of String)
        InputRasterPath.AddRange(MultispectralImages.ToList)
        InputRasterPath.AddRange(CoverClassificationImages.ToList)
        InputRasterPath.AddRange(WeatherGrid.AllValues)
        InputRasterPath.AddRange({FieldCapacityText.Text, WiltingPointText.Text})

        Dim IntersectRasterPath As String = IO.Path.ChangeExtension(IO.Path.GetTempFileName, ".img")
        Dim InputRasters(InputRasterPath.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterDataset
        Dim IntersectRaster = CreateIntersectRaster(InputRasterPath.ToArray, InputRasters, IntersectRasterPath)
        Dim IntersectRasterValue As ESRI.ArcGIS.Geodatabase.IRasterValue = New ESRI.ArcGIS.Geodatabase.RasterValue
        IntersectRasterValue.RasterDataset = IntersectRaster
        CalculationTextWater.AppendText(vbNewLine & "Succeeded at " & Now) : CalculationTextWater.AppendText(vbNewLine & "Creating temporary intersecting datasets...") : Windows.Forms.Application.DoEvents()
        If Abort = True Then Exit Sub

        ProgressPartWater.Maximum = GetRasterCursorIterations(IntersectRaster)

        For P = 0 To InputRasterPath.Count - 1
            CalculationTextWater.AppendText(vbNewLine & "   For " & IO.Path.GetFileName(InputRasterPath(P)) & "..." & Now) : Windows.Forms.Application.DoEvents()
            ExtractRaster(InputRasterPath(P), InputRasters(P), IntersectRasterPath, IntersectRaster)
            CalculationTextWater.AppendText(vbNewLine & "   Succeeded at " & Now) : Windows.Forms.Application.DoEvents()
            If Abort = True Then Exit Sub
        Next
        ProgressAllWater.PerformStep()

        Dim OutputRasterNames As New List(Of String)
        For I = 0 To OutputImagesBoxWater.Items.Count - 1
            If OutputImagesBoxWater.GetItemChecked(I) Then OutputRasterNames.Add(OutputImagesBoxWater.Items.Item(I))
        Next
        Dim WorkspaceFactory As ESRI.ArcGIS.Geodatabase.IWorkspaceFactory = New ESRI.ArcGIS.DataSourcesRaster.RasterWorkspaceFactoryClass()
        Dim Workspace As ESRI.ArcGIS.Geodatabase.IRasterWorkspace2 = CType(WorkspaceFactory.OpenFromFile(OutputDirectoryTextWater.Text, 0), ESRI.ArcGIS.DataSourcesRaster.IRasterWorkspace)

        Dim WaterBalanceModel As WaterBalance = DirectCast([Enum].Parse(GetType(WaterBalance), WaterBalanceBox.SelectedItem.ToString.Replace(" ", "_")), WaterBalance)
        Dim ImageSource As ImageSource = DirectCast([Enum].Parse(GetType(ImageSource), ImageSourceBox.SelectedItem.ToString.Replace(" ", "_")), ImageSource)
        Dim AssimilationMethod As DataAssimilation = DirectCast([Enum].Parse(GetType(DataAssimilation), DataAssimilationBox.SelectedItem.ToString.Replace(" ", "_")), DataAssimilation)
        Dim CoverTable = CreateTable(CoverPropertiesText.Text)
        Dim CoverPoint As New CoverPoint
        CoverPoint.Populate(CoverTable, CoverPointIndex)
        Dim WeatherTable = CreateTable(WeatherTableText.Text)
        Dim WeatherPoint As New WeatherPoint
        Dim WeatherGridIndex As New WeatherGridIndex
        Dim WeatherOffset As Integer = MultispectralImages.Count + CoverClassificationImages.Count

        Dim CoverClassificationIndex(MultispectralImages.Count - 1) As Integer
        For M = 0 To MultispectralImages.Count - 1
            CoverClassificationIndex(M) = GetNearestDateImageIndex(MultispectralImages(M), CoverClassificationImages)
        Next

        Dim IntersectRasterBand As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection = IntersectRaster
        Dim IntersectRaster2 As ESRI.ArcGIS.DataSourcesRaster.IRaster2 = CType(CType(IntersectRaster.CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
        Dim IntersectRasterCursor As ESRI.ArcGIS.Geodatabase.IRasterCursor = IntersectRaster2.CreateCursorEx(Nothing)

        Dim InRasterBand(InputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection
        Dim InRaster2(InputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRaster2
        Dim InRasterCursor(InputRasters.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterCursor
        For R = 0 To InputRasters.Count - 1
            InRasterBand(R) = InputRasters(R)
            InRaster2(R) = CType(CType(InputRasters(R).CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
            InRasterCursor(R) = InRaster2(R).CreateCursorEx(Nothing)
        Next

        Dim OutputRasters(OutputRasterNames.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterDataset
        For I = 0 To OutputImagesBoxWater.CheckedItems.Count - 1
            Dim FileName As String = "SETMI " & WaterBalanceModel.ToString & " " & OutputImagesBoxWater.CheckedItems(I).ToString.Split("(")(1).Replace(")", "") & " " & GetDateFromPath(MultispectralImages(0)).Year & ".img"


            If ExistsArcGISFile(OutputDirectoryTextWater.Text & "\" & FileName) Then DeleteArcGISFile(OutputDirectoryTextWater.Text & "\" & FileName)
            Dim OutputRasterDataset = Workspace.CreateRasterDataset(Name:=FileName, _
                                                                    Format:="IMAGINE Image", _
                                                                    Origin:=IntersectRasterValue.Extent.LowerLeft, _
                                                                    columnCount:=IntersectRasterValue.Extent.Width / IntersectRasterValue.RasterStorageDef.CellSize.X, _
                                                                    RowCount:=IntersectRasterValue.Extent.Height / IntersectRasterValue.RasterStorageDef.CellSize.Y, _
                                                                    cellSizeX:=IntersectRasterValue.RasterStorageDef.CellSize.X, _
                                                                    cellSizeY:=IntersectRasterValue.RasterStorageDef.CellSize.Y, _
                                                                    numBands:=1, _
                                                                    PixelType:=ESRI.ArcGIS.Geodatabase.rstPixelType.PT_FLOAT, _
                                                                    SpatialReference:=IntersectRasterValue.Extent.SpatialReference, _
                                                                    Permanent:=True)
            OutputRasters(I) = OutputRasterDataset
        Next

        Dim OutRasterBand(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterBandCollection
        Dim OutRaster2(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRaster2
        Dim OutRasterCursor(OutputRasters.Count - 1) As ESRI.ArcGIS.Geodatabase.IRasterCursor
        Dim OutRasterEdit(OutputRasters.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IRasterEdit
        For R = 0 To OutputRasters.Count - 1
            OutRasterBand(R) = OutputRasters(R)
            OutRaster2(R) = CType(CType(OutputRasters(R).CreateDefaultRaster, ESRI.ArcGIS.Geodatabase.IRaster), ESRI.ArcGIS.DataSourcesRaster.IRaster2)
            OutRasterCursor(R) = OutRaster2(R).CreateCursorEx(Nothing)
            OutRasterEdit(R) = OutRaster2(R)
        Next
        If Abort = True Then Exit Sub : ProgressAllWater.PerformStep()

        Dim SelectedLatitude As New List(Of Double)
        Dim SelectedLongitude As New List(Of Double)
        If WaterBalanceModel = WaterBalance.Crop_Coefficient_Point Then
            For Each Row As System.Windows.Forms.DataGridViewRow In CalculationCoordinatesGrid.Rows
                SelectedLongitude.Add(Row.Cells(0).Value)
                SelectedLatitude.Add(Row.Cells(1).Value)
            Next
        End If

        Dim DebugPath As String = OutputDirectoryTextWater.Text & "\SETMI Water Balance Output"
        If Not IO.Directory.Exists(DebugPath) Then IO.Directory.CreateDirectory(DebugPath)
        Dim PixelLength As Integer = ((IntersectRasterValue.Extent.Width / IntersectRasterValue.RasterStorageDef.CellSize.X) * (IntersectRasterValue.Extent.Height / IntersectRasterValue.RasterStorageDef.CellSize.Y)).ToString.Length
        Do
            Dim IntersectPixelBlock As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3 = IntersectRasterCursor.PixelBlock
            Dim MultispectralPixelBlock(MultispectralImages.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3
            Dim CoverClassificationPixelBlock(MultispectralImages.Count - 1) As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3
            For M = 0 To MultispectralImages.Count - 1
                MultispectralPixelBlock(M) = InRasterCursor(M).PixelBlock()
                CoverClassificationPixelBlock(M) = InRasterCursor(MultispectralImages.Count + CoverClassificationIndex(M)).PixelBlock()
            Next
            Dim FieldCapacityPixPixelBlock As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3 = InRasterCursor(InputRasterPath.Count - 2).PixelBlock
            Dim WiltingPointPixPixelBlock As ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3 = InRasterCursor(InputRasterPath.Count - 1).PixelBlock

            Dim IntersectPixels As System.Array = CType(IntersectPixelBlock.PixelData(0), System.Array)
            Dim MultispectralPixels(MultispectralImages.Count - 1, MultispectralPixelBlock(0).Planes - 1) As System.Array
            Dim CoverPixels(MultispectralImages.Count - 1) As System.Array
            For M = 0 To MultispectralImages.Count - 1
                For P = 0 To MultispectralPixelBlock(M).Planes - 1
                    MultispectralPixels(M, P) = CType(MultispectralPixelBlock(M).PixelData(P), System.Array)
                Next
                CoverPixels(M) = CType(CoverClassificationPixelBlock(M).PixelData(0), System.Array)
            Next
            Dim FieldCapacityPixels As System.Array = CType(FieldCapacityPixPixelBlock.PixelData(0), System.Array)
            Dim WiltingPointPixels As System.Array = CType(WiltingPointPixPixelBlock.PixelData(0), System.Array)
            Dim WeatherETDailyActualPixels(Math.Max(WeatherGrid.ETDailyActual.Count - 1, 0)) As System.Array
            For W = 0 To WeatherGrid.ETDailyActual.Count - 1
                WeatherETDailyActualPixels(W) = CType(CType(InRasterCursor(WeatherOffset + W).PixelBlock, ESRI.ArcGIS.DataSourcesRaster.IPixelBlock3).PixelData(0), System.Array)
            Next

            For Row As Long = 0 To MultispectralPixelBlock(0).Height - 1
                For Col As Long = 0 To MultispectralPixelBlock(0).Width - 1
                    If IntersectPixels.GetValue(Col, Row) = 1 Then
                        Dim CoverIndex As Integer = CoverValues.IndexOf(CoverPixels(0).GetValue(Col, Row))
                        If CoverIndex > -1 Then
                            If CoverSelectionGrid.Rows(CoverIndex).Cells(3).Value = True Then
                                Dim PixelLatitude As Single = 0
                                Dim PixelLongitude As Single = 0
                                IntersectRaster2.PixelToMap(InRasterCursor(0).TopLeft.X + Col, InRasterCursor(0).TopLeft.Y + Row, PixelLongitude, PixelLatitude)

                                Dim PixelIndex As Integer = -1
                                Try
                                    For S = 0 To SelectedLatitude.Count - 1
                                        If Math.Abs(PixelLatitude - SelectedLatitude(S)) < IntersectRasterValue.RasterStorageDef.CellSize.X / 2 Then
                                            If Math.Abs(PixelLongitude - SelectedLongitude(S)) < IntersectRasterValue.RasterStorageDef.CellSize.Y / 2 Then
                                                PixelIndex = S
                                                Exit For
                                            End If
                                        End If
                                    Next
                                Catch ex As Exception
                                    MsgBox(ex.Message)
                                End Try

                                If PixelIndex > -1 Then

                                    Dim Output As New System.Text.StringBuilder
                                    Dim Cover As Cover = DirectCast([Enum].Parse(GetType(Cover), CoverSelectionGrid.Rows(CoverIndex).Cells(1).Value.Replace(" ", "_")), Cover)
                                    Dim IrrigationMethod As IrrigationMethod = DirectCast([Enum].Parse(GetType(IrrigationMethod), CoverSelectionGrid.Rows(CoverIndex).Cells(2).Value.Replace(" ", "_")), IrrigationMethod)
                                    Dim ICover As Integer = CoverPoint.CoverName.IndexOf(CoverSelectionGrid.Rows(CoverIndex).Cells(0).Value)

                                    Dim MultispectralDate(MultispectralImages.Count - 1) As DateTime
                                    Dim Red(MultispectralImages.Count - 1) As Single
                                    Dim NIR(MultispectralImages.Count - 1) As Single
                                    Dim DateReflectance As New List(Of Integer)
                                    Dim KcbReflectance(MultispectralImages.Count - 1) As Single
                                    Dim FractionOfCover(MultispectralImages.Count - 1) As Single
                                    For M = 0 To MultispectralImages.Count - 1
                                        MultispectralDate(M) = GetDateFromPath(MultispectralImages(M))
                                        DateReflectance.Add(MultispectralDate(M).Subtract(DateSerial(MultispectralDate(M).Year - 1, 12, 31)).TotalDays)
                                        If RedIndex.Text <> "" Then Red(M) = MultispectralPixels(M, RedIndex.Text - 1).GetValue(Col, Row)
                                        If NIRIndex.Text <> "" Then NIR(M) = MultispectralPixels(M, NIRIndex.Text - 1).GetValue(Col, Row)
                                        Dim SAVI As Single = calcSAVI(Red(M), NIR(M))
                                        Dim NDVI As Single = calcNDVI(Red(M), NIR(M))
                                        KcbReflectance(M) = calcKcbReflectance(Cover, SAVI)
                                        Dim LAI As Single ' not used here but the function is used in the energy balance and it requires LAI
                                        FractionOfCover(M) = calcFc(Cover, NDVI, SAVI, LAI)
                                    Next

                                    Dim KcbIni As Single = CoverPoint.KcbInitial(ICover)
                                    Dim KcbMid As Single = CoverPoint.KcbMid(ICover)
                                    Dim KcbEnd As Single = CoverPoint.KcbEnd(ICover)
                                    Dim LIni As Integer = CoverPoint.PeriodInitial(ICover)
                                    Dim LDev As Integer = CoverPoint.PeriodDevelopment(ICover)
                                    Dim LMid As Integer = CoverPoint.PeriodMid(ICover)
                                    Dim LLate As Integer = CoverPoint.PeriodEnd(ICover)
                                    Dim DateIni As Integer = CoverPoint.DateInitial(ICover) 'need to check date
                                    Dim MinimumCoverHeight As Single = CoverPoint.MinimumCoverHeight(ICover)
                                    Dim MaximumCoverHeight As Single = Math.Max(CoverPoint.MaximumCoverHeight(ICover), 0.2)
                                    Dim Zrmax As Single = CoverPoint.MaximumRootDepth(ICover)
                                    Dim Zrmin As Single = 0.1
                                    Dim Ptab As Single = CoverPoint.P(ICover)
                                    Dim θFC As Single = FieldCapacityPixels.GetValue(Col, Row) / 1000
                                    Dim θWP As Single = WiltingPointPixels.GetValue(Col, Row) / 1000

                                    Dim Ze As Single = 0.1 'm
                                    Dim DateDev As Integer = DateIni + LIni
                                    Dim DateMid As Integer = DateDev + LDev
                                    Dim DateLate As Integer = DateMid + LMid
                                    Dim DateEnd As Integer = DateLate + LLate - 1
                                    Dim TEW = 1000 * (θFC - 0.5 * θWP) * Ze 'mm
                                    Dim REW As Single = 0.42 * TEW 'mm (Curve fit to data in FAO 56 Table 19)
                                    Dim De As Single = 0 'mm
                                    Dim Dr As Single = 0 'mm
                                    Dim DrLast As Single = 0 'mm
                                    Dim CR As Single = 0

                                    Dim Days As New List(Of Integer)
                                    For Each Day As Integer In DateReflectance : Days.Add(Day) : Next
                                    If Not Days.Contains(DateIni) Then Days.Add(DateIni)
                                    If Not Days.Contains(DateDev) Then Days.Add(DateDev)
                                    If Not Days.Contains(DateMid) Then Days.Add(DateMid)
                                    If Not Days.Contains(DateLate) Then Days.Add(DateLate)
                                    If Not Days.Contains(DateEnd) Then Days.Add(DateEnd)
                                    Days.Sort()
                                    Dim Kcbs(Days.Count - 1) As Single
                                    Kcbs(Days.IndexOf(DateIni)) = KcbIni
                                    Kcbs(Days.IndexOf(DateDev)) = KcbIni
                                    Kcbs(Days.IndexOf(DateMid)) = KcbMid
                                    Kcbs(Days.IndexOf(DateLate)) = KcbMid
                                    Kcbs(Days.IndexOf(DateEnd)) = KcbEnd
                                    For M = 0 To MultispectralDate.Count - 1
                                        Kcbs(Days.IndexOf(DateReflectance(M))) = KcbReflectance(M)
                                    Next

                                    WeatherPoint.Populate(WeatherTable, WeatherPointIndex, MultispectralDate(0).Year)
                                    Dim CoverName As String = [Enum].GetName(GetType(Cover), Cover).Replace("_", " ")

                                    Dim OutputImages(MultispectralImages.Count - 1) As WaterBalance_ImageOverpassOutput
                                    Dim OutputSeason(DateSerial(MultispectralDate(0).Year, 12, 31).DayOfYear - 1) As WaterBalance_SeasonOutput
                                    Dim BaseDate As DateTime = DateSerial(MultispectralDate(0).Year, 1, 1)
                                    For DoY = 0 To DateIni - 1
                                        Dim RecordDate = BaseDate.AddDays(DoY)
                                        OutputSeason(DoY) = New WaterBalance_SeasonOutput(RecordDate, 0, 0, 0, 0, 0, 0, 0)
                                    Next
                                    For DoY = DateEnd To OutputSeason.Length - 1
                                        Dim RecordDate = BaseDate.AddDays(DoY)
                                        OutputSeason(DoY) = New WaterBalance_SeasonOutput(RecordDate, 0, 0, 0, 0, 0, 0, 0)
                                    Next

                                    For DoY = DateIni To DateEnd
                                        Dim IWeather As Integer = WeatherPoint.RecordDate.IndexOf(DateSerial(MultispectralDate(0).Year - 1, 12, 31).AddDays(DoY))
                                        If IWeather > -1 Then
                                            Dim RecordDate As DateTime = BaseDate.AddDays(DoY)
                                            IWeather += 1
                                            Dim ReferenceET As Single = WeatherPoint.ETDailyReference(IWeather)
                                            Dim Irrigation As Single = WeatherPoint.Irrigation(IWeather)
                                            Dim EffectivePrecipitation As Single = IIf(WeatherPoint.Precipitation(IWeather) <= 0.2 * ReferenceET, 0, 0.8 * WeatherPoint.Precipitation(IWeather))
                                            Dim U2Limited As Single = Limit(calcU2(WeatherPoint.WindSpeed(IWeather), WeatherPoint.AnemometerReferenceHeight(IWeather), -1), 1, 6) ' the -1 in calcU2 for cases when using gridded data
                                            Dim RHminLimited As Single = Limit(WeatherPoint.RelativeHumidity(IWeather), 20, 80)
                                            Dim HcTab = calcSeasonInterpolation(DoY, MinimumCoverHeight, MaximumCoverHeight, MaximumCoverHeight, DateIni, DateDev, DateMid, DateLate, DateEnd)

                                            Dim Kcb As Single = calcSeasonInterpolation(DoY, Days.ToArray, Kcbs)
                                            If Kcb > 0.45 And DoY >= DateDev Then Kcb += (0.04 * (U2Limited - 2) - 0.004 * (RHminLimited - 45)) * (HcTab / 3) ^ (0.3)

                                            Dim Zri = Math.Min(Zrmin + (Zrmax - Zrmin) * (Kcb - KcbIni) / (KcbMid - KcbIni), Zrmax)
                                            If DoY >= DateMid Then Zri = Zrmax

                                            Dim KcMax As Single = Math.Max(1.2 + (0.04 * (U2Limited - 2) - 0.004 * (RHminLimited - 45)) * (HcTab / 3) ^ (0.3), Kcb + 0.05) 'dimensionless
                                            Dim KcMin As Single = Limit(KcbIni, 0.15, 0.2)

                                            Dim Fc As Single = ((Kcb - KcMin) / (KcMax - KcMin)) ^ (1 + 0.5 * HcTab)
                                            'needed: replace with Fc from image if it exists
                                            Dim Fw As Single = 1
                                            Select Case IrrigationMethod
                                                Case Functions.IrrigationMethod.Drip : Fw = 0.35
                                                Case Functions.IrrigationMethod.Furrow_Narrow_Bed : Fw = 0.8
                                                Case Functions.IrrigationMethod.Furrow_Narrow_Bed_Alternating : Fw = 0.45
                                                Case Functions.IrrigationMethod.Furrow_Wide_Bed : Fw = 0.5
                                                Case Functions.IrrigationMethod.Furrow_Wide_Bed_Alternating : Fw = 0.35
                                            End Select
                                            Fw = IIf(Irrigation + EffectivePrecipitation = 0, Fw, Irrigation / (Irrigation + EffectivePrecipitation) * Fw + EffectivePrecipitation / (Irrigation + EffectivePrecipitation))
                                            Dim Few As Single = Limit(Math.Min(1 - Fc, Fw), 0.01, 1)

                                            Dim Kr As Single = (TEW - Math.Max(De, REW)) / (TEW - REW)
                                            Dim Ke As Single = Math.Min(Kr * (KcMax - Kcb), Few * KcMax)
                                            Dim Kc As Single = Kcb + Ke
                                            Dim ETc As Single = Kc * ReferenceET 'mm

                                            Dim P As Single = Limit((Ptab + 0.04 * (5 - ETc)) * (1.15 - 1.25 * (θFC - θWP)), 0.1, 0.8) '(P adjustment curve fit to data in FAO 56 Table 19)

                                            Dim TAW = 1000 * (θFC - θWP) * Zri 'mm
                                            Dim RAW As Single = P * TAW
                                            Dim Ks As Single = (TAW - Math.Max(DrLast, RAW)) / (TAW - RAW)
                                            Dim ETcAdjusted As Single = (Ks * Kcb + Ke) * ReferenceET

                                            Dim EffectiveIrrigation As Single = Irrigation / Fw
                                            Dim EffectiveEvaporation As Single = Math.Min(Ke * ReferenceET / Few, TEW)
                                            De = Limit(De - EffectivePrecipitation - EffectiveIrrigation + EffectiveEvaporation, 0, TEW)
                                            Dr = Limit(DrLast - EffectivePrecipitation - EffectiveIrrigation - CR + ETcAdjusted, 0, TAW)

                                            Dim EnergyBalanceET As Single = 0
                                            Dim ETcAdjustedAssimilated As Single = 0

                                            WeatherGridIndex.ETDailyActual = GetSameDateImageIndex(RecordDate, WeatherGrid.ETDailyActual)
                                            If WeatherGridIndex.ETDailyActual > -1 Then EnergyBalanceET = WeatherETDailyActualPixels(WeatherGridIndex.ETDailyActual).GetValue(Col, Row)

                                            If AssimilationMethod <> DataAssimilation.No_Assimilation Then
                                                If WeatherGridIndex.ETDailyActual > -1 Then
                                                    ETcAdjustedAssimilated = calcETAssimilation(ETcAdjusted, EnergyBalanceET, AssimilationMethod)
                                                    Ks = Math.Min(((ETcAdjustedAssimilated / ReferenceET) - Ke) / Kcb, 1)
                                                    DrLast = Math.Max(TAW - Ks * (TAW - RAW), 0)
                                                    Dr = Limit(DrLast - EffectivePrecipitation - EffectiveIrrigation - CR + ETcAdjustedAssimilated, 0, TAW)
                                                End If
                                            End If

                                            DrLast = Dr

                                            For M = 0 To MultispectralDate.Count - 1
                                                If MultispectralDate(M) = RecordDate Then
                                                    OutputImages(M) = New WaterBalance_ImageOverpassOutput(RecordDate, Ke, Ks, calcSeasonInterpolation(DoY, KcbIni, KcbMid, KcbEnd, DateIni, DateDev, DateMid, DateLate, DateEnd), Kcb, Zri, θFC, TAW - Dr, ReferenceET, ETcAdjusted, EnergyBalanceET, ETcAdjustedAssimilated)
                                                End If
                                            Next

                                            If AssimilationMethod <> DataAssimilation.No_Assimilation Then If WeatherGridIndex.ETDailyActual > -1 Then ETcAdjusted = ETcAdjustedAssimilated

                                            OutputSeason(RecordDate.DayOfYear - 1) = New WaterBalance_SeasonOutput(RecordDate, ReferenceET, ETcAdjusted, Dr, Kcb, Ke, Ks, Zri)
                                        End If
                                    Next

                                    Using CSV As New IO.StreamWriter(DebugPath & "\Pixel Lat-" & PixelLatitude & " Long-" & PixelLongitude & ".csv")
                                        CSV.WriteLine("X,Y,Cover,Planting Date,Emergence Date")
                                        CSV.WriteLine(PixelLongitude & "," & PixelLatitude & "," & CoverName & "," & DateSerial(MultispectralDate(0).Year - 1, 12, 31).AddDays(DateIni) & "," & DateSerial(MultispectralDate(0).Year - 1, 12, 31).AddDays(DateDev))
                                        CSV.WriteLine()
                                        CSV.WriteLine("Date,Ke,Ks,Kcb(FAO),Kcb(VI),Root Depth,Field Capacity,Soil Moisture,ETo (mm),ET(Kcb) (mm),ET(EB) (mm),ET(As) (mm)")
                                        For Each Line In OutputImages
                                            CSV.WriteLine(Line.WriteDelimited)
                                        Next
                                        CSV.WriteLine()
                                        CSV.WriteLine("Date,ETo,ETa,Depletion,Kcb,Ke,Ks,Root Depth")
                                        For Each Line In OutputSeason
                                            CSV.WriteLine(Line.WriteDelimited)
                                        Next
                                    End Using
                                End If
                            End If
                        End If
                    Else

                    End If
                Next
            Next

            For I = 1 To InputRasters.Count - 1
                InRasterCursor(I).Next()
            Next
            'System.Runtime.InteropServices.Marshal.ReleaseComObject(MultispectralPixelBlock)
            ProgressPartWater.PerformStep()
            If Abort = True Then Exit Sub
            Windows.Forms.Application.DoEvents()
        Loop While InRasterCursor(0).Next = True
        ProgressAllWater.PerformStep()

        For I = 0 To OutputRasters.Count - 1
            Dim Geoprocessor As New ESRI.ArcGIS.Geoprocessor.Geoprocessor
            Geoprocessor.Execute(New ESRI.ArcGIS.DataManagementTools.CalculateStatistics(OutputRasters(I)), Nothing)
            System.Runtime.InteropServices.Marshal.ReleaseComObject(OutputRasters(I))
            System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRaster2(I))
            System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterBand(I))
            System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterCursor(I))
            System.Runtime.InteropServices.Marshal.ReleaseComObject(OutRasterEdit(I))
        Next

        For I = 0 To InputRasters.Count - 1
            Dim Path As String = InputRasters(I).CompleteName
            DeleteArcGISFile(Path)
        Next

        For I = 0 To InputRasters.Count - 1
            System.Runtime.InteropServices.Marshal.ReleaseComObject(InputRasters(I))
        Next
        System.Runtime.InteropServices.Marshal.ReleaseComObject(IntersectRaster)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(IntersectRasterValue)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(CoverTable)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(WeatherTable)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(Workspace)
        System.Runtime.InteropServices.Marshal.ReleaseComObject(WorkspaceFactory)
        Timer.Stop() : ProgressAllWater.PerformStep()
        CalculationTextWater.AppendText(vbNewLine & "Succeeded at " & Now & vbNewLine & "Elasped time (" & Timer.Elapsed.ToString & ").")
    End Sub

#End Region

#End Region

End Class